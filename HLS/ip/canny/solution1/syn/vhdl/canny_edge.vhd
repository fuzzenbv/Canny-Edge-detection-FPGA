-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity canny_edge is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    AXI_LITE_clk : IN STD_LOGIC;
    ap_rst_n_AXI_LITE_clk : IN STD_LOGIC;
    INPUT_data_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    OUTPUT_data_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    INPUT_data_V_TVALID : IN STD_LOGIC;
    INPUT_data_V_TREADY : OUT STD_LOGIC;
    OUTPUT_data_V_TVALID : OUT STD_LOGIC;
    OUTPUT_data_V_TREADY : IN STD_LOGIC );
end;


architecture behav of canny_edge is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "canny_edge,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=5.250000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=14,HLS_SYN_DSP=17,HLS_SYN_FF=3862,HLS_SYN_LUT=6081,HLS_VERSION=2018_3}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal rows_V : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_V : STD_LOGIC_VECTOR (31 downto 0);
    signal threshold1 : STD_LOGIC_VECTOR (31 downto 0);
    signal threshold2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_rst_n_AXI_LITE_clk_inv : STD_LOGIC;
    signal Block_Mat_exit27932_U0_ap_start : STD_LOGIC;
    signal Block_Mat_exit27932_U0_ap_done : STD_LOGIC;
    signal Block_Mat_exit27932_U0_ap_continue : STD_LOGIC;
    signal Block_Mat_exit27932_U0_ap_idle : STD_LOGIC;
    signal Block_Mat_exit27932_U0_ap_ready : STD_LOGIC;
    signal Block_Mat_exit27932_U0_packets_cast_out_out_din : STD_LOGIC_VECTOR (19 downto 0);
    signal Block_Mat_exit27932_U0_packets_cast_out_out_write : STD_LOGIC;
    signal Loop_1_proc_U0_ap_start : STD_LOGIC;
    signal Loop_1_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_1_proc_U0_ap_done : STD_LOGIC;
    signal Loop_1_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_1_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_1_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_1_proc_U0_start_out : STD_LOGIC;
    signal Loop_1_proc_U0_start_write : STD_LOGIC;
    signal Loop_1_proc_U0_packets_cast_loc_read : STD_LOGIC;
    signal Loop_1_proc_U0_in_stream_data_V_TREADY : STD_LOGIC;
    signal Loop_1_proc_U0_src_bw_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_1_proc_U0_src_bw_data_stream_0_V_write : STD_LOGIC;
    signal Loop_1_proc_U0_packets_cast_loc_out_din : STD_LOGIC_VECTOR (19 downto 0);
    signal Loop_1_proc_U0_packets_cast_loc_out_write : STD_LOGIC;
    signal Duplicate_U0_ap_start : STD_LOGIC;
    signal Duplicate_U0_start_full_n : STD_LOGIC;
    signal Duplicate_U0_ap_done : STD_LOGIC;
    signal Duplicate_U0_ap_continue : STD_LOGIC;
    signal Duplicate_U0_ap_idle : STD_LOGIC;
    signal Duplicate_U0_ap_ready : STD_LOGIC;
    signal Duplicate_U0_start_out : STD_LOGIC;
    signal Duplicate_U0_start_write : STD_LOGIC;
    signal Duplicate_U0_src_data_stream_V_read : STD_LOGIC;
    signal Duplicate_U0_dst1_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Duplicate_U0_dst1_data_stream_V_write : STD_LOGIC;
    signal Duplicate_U0_dst2_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Duplicate_U0_dst2_data_stream_V_write : STD_LOGIC;
    signal Sobel_U0_ap_start : STD_LOGIC;
    signal Sobel_U0_ap_done : STD_LOGIC;
    signal Sobel_U0_ap_continue : STD_LOGIC;
    signal Sobel_U0_ap_idle : STD_LOGIC;
    signal Sobel_U0_ap_ready : STD_LOGIC;
    signal Sobel_U0_start_out : STD_LOGIC;
    signal Sobel_U0_start_write : STD_LOGIC;
    signal Sobel_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal Sobel_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Sobel_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal Sobel_1_U0_ap_start : STD_LOGIC;
    signal Sobel_1_U0_ap_done : STD_LOGIC;
    signal Sobel_1_U0_ap_continue : STD_LOGIC;
    signal Sobel_1_U0_ap_idle : STD_LOGIC;
    signal Sobel_1_U0_ap_ready : STD_LOGIC;
    signal Sobel_1_U0_p_src_data_stream_V_read : STD_LOGIC;
    signal Sobel_1_U0_p_dst_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal Sobel_1_U0_p_dst_data_stream_V_write : STD_LOGIC;
    signal gradient_decompositi_U0_ap_start : STD_LOGIC;
    signal gradient_decompositi_U0_ap_done : STD_LOGIC;
    signal gradient_decompositi_U0_ap_continue : STD_LOGIC;
    signal gradient_decompositi_U0_ap_idle : STD_LOGIC;
    signal gradient_decompositi_U0_ap_ready : STD_LOGIC;
    signal gradient_decompositi_U0_start_out : STD_LOGIC;
    signal gradient_decompositi_U0_start_write : STD_LOGIC;
    signal gradient_decompositi_U0_gx_data_stream_V_read : STD_LOGIC;
    signal gradient_decompositi_U0_gy_data_stream_V_read : STD_LOGIC;
    signal gradient_decompositi_U0_gd_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal gradient_decompositi_U0_gd_data_stream_V_write : STD_LOGIC;
    signal nonmax_suppression_U0_ap_start : STD_LOGIC;
    signal nonmax_suppression_U0_ap_done : STD_LOGIC;
    signal nonmax_suppression_U0_ap_continue : STD_LOGIC;
    signal nonmax_suppression_U0_ap_idle : STD_LOGIC;
    signal nonmax_suppression_U0_ap_ready : STD_LOGIC;
    signal nonmax_suppression_U0_start_out : STD_LOGIC;
    signal nonmax_suppression_U0_start_write : STD_LOGIC;
    signal nonmax_suppression_U0_gd_data_stream_V_read : STD_LOGIC;
    signal nonmax_suppression_U0_dst_data_stream_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal nonmax_suppression_U0_dst_data_stream_V_write : STD_LOGIC;
    signal hysteresis_U0_ap_start : STD_LOGIC;
    signal hysteresis_U0_ap_done : STD_LOGIC;
    signal hysteresis_U0_ap_continue : STD_LOGIC;
    signal hysteresis_U0_ap_idle : STD_LOGIC;
    signal hysteresis_U0_ap_ready : STD_LOGIC;
    signal hysteresis_U0_src_data_stream_V_read : STD_LOGIC;
    signal hysteresis_U0_dst_data_stream_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal hysteresis_U0_dst_data_stream_V_write : STD_LOGIC;
    signal Loop_2_proc_U0_ap_start : STD_LOGIC;
    signal Loop_2_proc_U0_ap_done : STD_LOGIC;
    signal Loop_2_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_2_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_2_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_2_proc_U0_packets_cast_loc_read : STD_LOGIC;
    signal Loop_2_proc_U0_canny_edges_data_stream_0_V_read : STD_LOGIC;
    signal Loop_2_proc_U0_out_stream_data_V_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_out_stream_data_V_TVALID : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal packets_cast_loc_c_full_n : STD_LOGIC;
    signal packets_cast_loc_c_dout : STD_LOGIC_VECTOR (19 downto 0);
    signal packets_cast_loc_c_empty_n : STD_LOGIC;
    signal src_bw_data_stream_0_full_n : STD_LOGIC;
    signal src_bw_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src_bw_data_stream_0_empty_n : STD_LOGIC;
    signal packets_cast_loc_c35_full_n : STD_LOGIC;
    signal packets_cast_loc_c35_dout : STD_LOGIC_VECTOR (19 downto 0);
    signal packets_cast_loc_c35_empty_n : STD_LOGIC;
    signal src1_data_stream_0_s_full_n : STD_LOGIC;
    signal src1_data_stream_0_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src1_data_stream_0_s_empty_n : STD_LOGIC;
    signal src2_data_stream_0_s_full_n : STD_LOGIC;
    signal src2_data_stream_0_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src2_data_stream_0_s_empty_n : STD_LOGIC;
    signal sobel_gx_data_stream_full_n : STD_LOGIC;
    signal sobel_gx_data_stream_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal sobel_gx_data_stream_empty_n : STD_LOGIC;
    signal sobel_gy_data_stream_full_n : STD_LOGIC;
    signal sobel_gy_data_stream_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal sobel_gy_data_stream_empty_n : STD_LOGIC;
    signal grad_gd_data_stream_s_full_n : STD_LOGIC;
    signal grad_gd_data_stream_s_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal grad_gd_data_stream_s_empty_n : STD_LOGIC;
    signal suppressed_data_stre_full_n : STD_LOGIC;
    signal suppressed_data_stre_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal suppressed_data_stre_empty_n : STD_LOGIC;
    signal canny_edges_data_str_full_n : STD_LOGIC;
    signal canny_edges_data_str_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal canny_edges_data_str_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Block_Mat_exit27932_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_Mat_exit27932_U0_ap_ready : STD_LOGIC;
    signal Block_Mat_exit27932_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_Loop_1_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Loop_1_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_1_proc_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal Block_Mat_exit27932_U0_start_full_n : STD_LOGIC;
    signal Block_Mat_exit27932_U0_start_write : STD_LOGIC;
    signal start_for_Duplicate_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Duplicate_U0_full_n : STD_LOGIC;
    signal start_for_Duplicate_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Duplicate_U0_empty_n : STD_LOGIC;
    signal start_for_Loop_2_proc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_2_proc_U0_full_n : STD_LOGIC;
    signal start_for_Loop_2_proc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_2_proc_U0_empty_n : STD_LOGIC;
    signal start_for_Sobel_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Sobel_U0_full_n : STD_LOGIC;
    signal start_for_Sobel_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Sobel_U0_empty_n : STD_LOGIC;
    signal start_for_Sobel_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Sobel_1_U0_full_n : STD_LOGIC;
    signal start_for_Sobel_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Sobel_1_U0_empty_n : STD_LOGIC;
    signal start_for_gradient_decompositi_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_decompositi_U0_full_n : STD_LOGIC;
    signal start_for_gradient_decompositi_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_decompositi_U0_empty_n : STD_LOGIC;
    signal Sobel_1_U0_start_full_n : STD_LOGIC;
    signal Sobel_1_U0_start_write : STD_LOGIC;
    signal start_for_nonmax_suppression_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_nonmax_suppression_U0_full_n : STD_LOGIC;
    signal start_for_nonmax_suppression_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_nonmax_suppression_U0_empty_n : STD_LOGIC;
    signal start_for_hysteresis_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_hysteresis_U0_full_n : STD_LOGIC;
    signal start_for_hysteresis_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_hysteresis_U0_empty_n : STD_LOGIC;
    signal hysteresis_U0_start_full_n : STD_LOGIC;
    signal hysteresis_U0_start_write : STD_LOGIC;
    signal Loop_2_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_2_proc_U0_start_write : STD_LOGIC;

    component Block_Mat_exit27932_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
        cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
        packets_cast_out_out_din : OUT STD_LOGIC_VECTOR (19 downto 0);
        packets_cast_out_out_full_n : IN STD_LOGIC;
        packets_cast_out_out_write : OUT STD_LOGIC );
    end component;


    component Loop_1_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        packets_cast_loc_dout : IN STD_LOGIC_VECTOR (19 downto 0);
        packets_cast_loc_empty_n : IN STD_LOGIC;
        packets_cast_loc_read : OUT STD_LOGIC;
        in_stream_data_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        in_stream_data_V_TVALID : IN STD_LOGIC;
        in_stream_data_V_TREADY : OUT STD_LOGIC;
        src_bw_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        src_bw_data_stream_0_V_full_n : IN STD_LOGIC;
        src_bw_data_stream_0_V_write : OUT STD_LOGIC;
        packets_cast_loc_out_din : OUT STD_LOGIC_VECTOR (19 downto 0);
        packets_cast_loc_out_full_n : IN STD_LOGIC;
        packets_cast_loc_out_write : OUT STD_LOGIC );
    end component;


    component Duplicate IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        src_rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
        src_cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        dst1_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst1_data_stream_V_full_n : IN STD_LOGIC;
        dst1_data_stream_V_write : OUT STD_LOGIC;
        dst2_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst2_data_stream_V_full_n : IN STD_LOGIC;
        dst2_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Sobel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_src_rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component Sobel_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_data_stream_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_V_read : OUT STD_LOGIC;
        p_dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_dst_data_stream_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component gradient_decompositi IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        gx_rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
        gx_cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
        gx_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        gx_data_stream_V_empty_n : IN STD_LOGIC;
        gx_data_stream_V_read : OUT STD_LOGIC;
        gy_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        gy_data_stream_V_empty_n : IN STD_LOGIC;
        gy_data_stream_V_read : OUT STD_LOGIC;
        gd_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        gd_data_stream_V_full_n : IN STD_LOGIC;
        gd_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component nonmax_suppression IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        gd_rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
        gd_cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
        gd_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        gd_data_stream_V_empty_n : IN STD_LOGIC;
        gd_data_stream_V_read : OUT STD_LOGIC;
        dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        dst_data_stream_V_full_n : IN STD_LOGIC;
        dst_data_stream_V_write : OUT STD_LOGIC );
    end component;


    component hysteresis IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
        src_cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
        src_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src_data_stream_V_empty_n : IN STD_LOGIC;
        src_data_stream_V_read : OUT STD_LOGIC;
        dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_V_full_n : IN STD_LOGIC;
        dst_data_stream_V_write : OUT STD_LOGIC;
        threshold_low : IN STD_LOGIC_VECTOR (31 downto 0);
        threshold_high : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Loop_2_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        packets_cast_loc_dout : IN STD_LOGIC_VECTOR (19 downto 0);
        packets_cast_loc_empty_n : IN STD_LOGIC;
        packets_cast_loc_read : OUT STD_LOGIC;
        canny_edges_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        canny_edges_data_stream_0_V_empty_n : IN STD_LOGIC;
        canny_edges_data_stream_0_V_read : OUT STD_LOGIC;
        out_stream_data_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_stream_data_V_TVALID : OUT STD_LOGIC;
        out_stream_data_V_TREADY : IN STD_LOGIC );
    end component;


    component fifo_w20_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (19 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (19 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w20_d7_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (19 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (19 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Duplicate_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Loop_2_proc_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Sobel_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Sobel_1_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_gradient_decompositi_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_nonmax_suppression_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_hysteresis_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component canny_edge_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        rows_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        threshold1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        threshold2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        rst : IN STD_LOGIC );
    end component;



begin
    canny_edge_CONTROL_BUS_s_axi_U : component canny_edge_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => AXI_LITE_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        rows_V => rows_V,
        cols_V => cols_V,
        threshold1 => threshold1,
        threshold2 => threshold2,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        clk => ap_clk,
        rst => ap_rst_n_AXI_LITE_clk_inv);

    Block_Mat_exit27932_U0 : component Block_Mat_exit27932_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_Mat_exit27932_U0_ap_start,
        ap_done => Block_Mat_exit27932_U0_ap_done,
        ap_continue => Block_Mat_exit27932_U0_ap_continue,
        ap_idle => Block_Mat_exit27932_U0_ap_idle,
        ap_ready => Block_Mat_exit27932_U0_ap_ready,
        rows_V => rows_V,
        cols_V => cols_V,
        packets_cast_out_out_din => Block_Mat_exit27932_U0_packets_cast_out_out_din,
        packets_cast_out_out_full_n => packets_cast_loc_c_full_n,
        packets_cast_out_out_write => Block_Mat_exit27932_U0_packets_cast_out_out_write);

    Loop_1_proc_U0 : component Loop_1_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_1_proc_U0_ap_start,
        start_full_n => Loop_1_proc_U0_start_full_n,
        ap_done => Loop_1_proc_U0_ap_done,
        ap_continue => Loop_1_proc_U0_ap_continue,
        ap_idle => Loop_1_proc_U0_ap_idle,
        ap_ready => Loop_1_proc_U0_ap_ready,
        start_out => Loop_1_proc_U0_start_out,
        start_write => Loop_1_proc_U0_start_write,
        packets_cast_loc_dout => packets_cast_loc_c_dout,
        packets_cast_loc_empty_n => packets_cast_loc_c_empty_n,
        packets_cast_loc_read => Loop_1_proc_U0_packets_cast_loc_read,
        in_stream_data_V_TDATA => INPUT_data_V_TDATA,
        in_stream_data_V_TVALID => INPUT_data_V_TVALID,
        in_stream_data_V_TREADY => Loop_1_proc_U0_in_stream_data_V_TREADY,
        src_bw_data_stream_0_V_din => Loop_1_proc_U0_src_bw_data_stream_0_V_din,
        src_bw_data_stream_0_V_full_n => src_bw_data_stream_0_full_n,
        src_bw_data_stream_0_V_write => Loop_1_proc_U0_src_bw_data_stream_0_V_write,
        packets_cast_loc_out_din => Loop_1_proc_U0_packets_cast_loc_out_din,
        packets_cast_loc_out_full_n => packets_cast_loc_c35_full_n,
        packets_cast_loc_out_write => Loop_1_proc_U0_packets_cast_loc_out_write);

    Duplicate_U0 : component Duplicate
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Duplicate_U0_ap_start,
        start_full_n => Duplicate_U0_start_full_n,
        ap_done => Duplicate_U0_ap_done,
        ap_continue => Duplicate_U0_ap_continue,
        ap_idle => Duplicate_U0_ap_idle,
        ap_ready => Duplicate_U0_ap_ready,
        start_out => Duplicate_U0_start_out,
        start_write => Duplicate_U0_start_write,
        src_rows_V => rows_V,
        src_cols_V => cols_V,
        src_data_stream_V_dout => src_bw_data_stream_0_dout,
        src_data_stream_V_empty_n => src_bw_data_stream_0_empty_n,
        src_data_stream_V_read => Duplicate_U0_src_data_stream_V_read,
        dst1_data_stream_V_din => Duplicate_U0_dst1_data_stream_V_din,
        dst1_data_stream_V_full_n => src1_data_stream_0_s_full_n,
        dst1_data_stream_V_write => Duplicate_U0_dst1_data_stream_V_write,
        dst2_data_stream_V_din => Duplicate_U0_dst2_data_stream_V_din,
        dst2_data_stream_V_full_n => src2_data_stream_0_s_full_n,
        dst2_data_stream_V_write => Duplicate_U0_dst2_data_stream_V_write);

    Sobel_U0 : component Sobel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Sobel_U0_ap_start,
        start_full_n => start_for_gradient_decompositi_U0_full_n,
        ap_done => Sobel_U0_ap_done,
        ap_continue => Sobel_U0_ap_continue,
        ap_idle => Sobel_U0_ap_idle,
        ap_ready => Sobel_U0_ap_ready,
        start_out => Sobel_U0_start_out,
        start_write => Sobel_U0_start_write,
        p_src_rows_V => rows_V,
        p_src_cols_V => cols_V,
        p_src_data_stream_V_dout => src1_data_stream_0_s_dout,
        p_src_data_stream_V_empty_n => src1_data_stream_0_s_empty_n,
        p_src_data_stream_V_read => Sobel_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => Sobel_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => sobel_gx_data_stream_full_n,
        p_dst_data_stream_V_write => Sobel_U0_p_dst_data_stream_V_write);

    Sobel_1_U0 : component Sobel_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Sobel_1_U0_ap_start,
        ap_done => Sobel_1_U0_ap_done,
        ap_continue => Sobel_1_U0_ap_continue,
        ap_idle => Sobel_1_U0_ap_idle,
        ap_ready => Sobel_1_U0_ap_ready,
        p_src_rows_V => rows_V,
        p_src_cols_V => cols_V,
        p_src_data_stream_V_dout => src2_data_stream_0_s_dout,
        p_src_data_stream_V_empty_n => src2_data_stream_0_s_empty_n,
        p_src_data_stream_V_read => Sobel_1_U0_p_src_data_stream_V_read,
        p_dst_data_stream_V_din => Sobel_1_U0_p_dst_data_stream_V_din,
        p_dst_data_stream_V_full_n => sobel_gy_data_stream_full_n,
        p_dst_data_stream_V_write => Sobel_1_U0_p_dst_data_stream_V_write);

    gradient_decompositi_U0 : component gradient_decompositi
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => gradient_decompositi_U0_ap_start,
        start_full_n => start_for_nonmax_suppression_U0_full_n,
        ap_done => gradient_decompositi_U0_ap_done,
        ap_continue => gradient_decompositi_U0_ap_continue,
        ap_idle => gradient_decompositi_U0_ap_idle,
        ap_ready => gradient_decompositi_U0_ap_ready,
        start_out => gradient_decompositi_U0_start_out,
        start_write => gradient_decompositi_U0_start_write,
        gx_rows_V => rows_V,
        gx_cols_V => cols_V,
        gx_data_stream_V_dout => sobel_gx_data_stream_dout,
        gx_data_stream_V_empty_n => sobel_gx_data_stream_empty_n,
        gx_data_stream_V_read => gradient_decompositi_U0_gx_data_stream_V_read,
        gy_data_stream_V_dout => sobel_gy_data_stream_dout,
        gy_data_stream_V_empty_n => sobel_gy_data_stream_empty_n,
        gy_data_stream_V_read => gradient_decompositi_U0_gy_data_stream_V_read,
        gd_data_stream_V_din => gradient_decompositi_U0_gd_data_stream_V_din,
        gd_data_stream_V_full_n => grad_gd_data_stream_s_full_n,
        gd_data_stream_V_write => gradient_decompositi_U0_gd_data_stream_V_write);

    nonmax_suppression_U0 : component nonmax_suppression
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => nonmax_suppression_U0_ap_start,
        start_full_n => start_for_hysteresis_U0_full_n,
        ap_done => nonmax_suppression_U0_ap_done,
        ap_continue => nonmax_suppression_U0_ap_continue,
        ap_idle => nonmax_suppression_U0_ap_idle,
        ap_ready => nonmax_suppression_U0_ap_ready,
        start_out => nonmax_suppression_U0_start_out,
        start_write => nonmax_suppression_U0_start_write,
        gd_rows_V => rows_V,
        gd_cols_V => cols_V,
        gd_data_stream_V_dout => grad_gd_data_stream_s_dout,
        gd_data_stream_V_empty_n => grad_gd_data_stream_s_empty_n,
        gd_data_stream_V_read => nonmax_suppression_U0_gd_data_stream_V_read,
        dst_data_stream_V_din => nonmax_suppression_U0_dst_data_stream_V_din,
        dst_data_stream_V_full_n => suppressed_data_stre_full_n,
        dst_data_stream_V_write => nonmax_suppression_U0_dst_data_stream_V_write);

    hysteresis_U0 : component hysteresis
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => hysteresis_U0_ap_start,
        ap_done => hysteresis_U0_ap_done,
        ap_continue => hysteresis_U0_ap_continue,
        ap_idle => hysteresis_U0_ap_idle,
        ap_ready => hysteresis_U0_ap_ready,
        src_rows_V => rows_V,
        src_cols_V => cols_V,
        src_data_stream_V_dout => suppressed_data_stre_dout,
        src_data_stream_V_empty_n => suppressed_data_stre_empty_n,
        src_data_stream_V_read => hysteresis_U0_src_data_stream_V_read,
        dst_data_stream_V_din => hysteresis_U0_dst_data_stream_V_din,
        dst_data_stream_V_full_n => canny_edges_data_str_full_n,
        dst_data_stream_V_write => hysteresis_U0_dst_data_stream_V_write,
        threshold_low => threshold1,
        threshold_high => threshold2);

    Loop_2_proc_U0 : component Loop_2_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_2_proc_U0_ap_start,
        ap_done => Loop_2_proc_U0_ap_done,
        ap_continue => Loop_2_proc_U0_ap_continue,
        ap_idle => Loop_2_proc_U0_ap_idle,
        ap_ready => Loop_2_proc_U0_ap_ready,
        packets_cast_loc_dout => packets_cast_loc_c35_dout,
        packets_cast_loc_empty_n => packets_cast_loc_c35_empty_n,
        packets_cast_loc_read => Loop_2_proc_U0_packets_cast_loc_read,
        canny_edges_data_stream_0_V_dout => canny_edges_data_str_dout,
        canny_edges_data_stream_0_V_empty_n => canny_edges_data_str_empty_n,
        canny_edges_data_stream_0_V_read => Loop_2_proc_U0_canny_edges_data_stream_0_V_read,
        out_stream_data_V_TDATA => Loop_2_proc_U0_out_stream_data_V_TDATA,
        out_stream_data_V_TVALID => Loop_2_proc_U0_out_stream_data_V_TVALID,
        out_stream_data_V_TREADY => OUTPUT_data_V_TREADY);

    packets_cast_loc_c_U : component fifo_w20_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit27932_U0_packets_cast_out_out_din,
        if_full_n => packets_cast_loc_c_full_n,
        if_write => Block_Mat_exit27932_U0_packets_cast_out_out_write,
        if_dout => packets_cast_loc_c_dout,
        if_empty_n => packets_cast_loc_c_empty_n,
        if_read => Loop_1_proc_U0_packets_cast_loc_read);

    src_bw_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_1_proc_U0_src_bw_data_stream_0_V_din,
        if_full_n => src_bw_data_stream_0_full_n,
        if_write => Loop_1_proc_U0_src_bw_data_stream_0_V_write,
        if_dout => src_bw_data_stream_0_dout,
        if_empty_n => src_bw_data_stream_0_empty_n,
        if_read => Duplicate_U0_src_data_stream_V_read);

    packets_cast_loc_c35_U : component fifo_w20_d7_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_1_proc_U0_packets_cast_loc_out_din,
        if_full_n => packets_cast_loc_c35_full_n,
        if_write => Loop_1_proc_U0_packets_cast_loc_out_write,
        if_dout => packets_cast_loc_c35_dout,
        if_empty_n => packets_cast_loc_c35_empty_n,
        if_read => Loop_2_proc_U0_packets_cast_loc_read);

    src1_data_stream_0_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate_U0_dst1_data_stream_V_din,
        if_full_n => src1_data_stream_0_s_full_n,
        if_write => Duplicate_U0_dst1_data_stream_V_write,
        if_dout => src1_data_stream_0_s_dout,
        if_empty_n => src1_data_stream_0_s_empty_n,
        if_read => Sobel_U0_p_src_data_stream_V_read);

    src2_data_stream_0_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Duplicate_U0_dst2_data_stream_V_din,
        if_full_n => src2_data_stream_0_s_full_n,
        if_write => Duplicate_U0_dst2_data_stream_V_write,
        if_dout => src2_data_stream_0_s_dout,
        if_empty_n => src2_data_stream_0_s_empty_n,
        if_read => Sobel_1_U0_p_src_data_stream_V_read);

    sobel_gx_data_stream_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Sobel_U0_p_dst_data_stream_V_din,
        if_full_n => sobel_gx_data_stream_full_n,
        if_write => Sobel_U0_p_dst_data_stream_V_write,
        if_dout => sobel_gx_data_stream_dout,
        if_empty_n => sobel_gx_data_stream_empty_n,
        if_read => gradient_decompositi_U0_gx_data_stream_V_read);

    sobel_gy_data_stream_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Sobel_1_U0_p_dst_data_stream_V_din,
        if_full_n => sobel_gy_data_stream_full_n,
        if_write => Sobel_1_U0_p_dst_data_stream_V_write,
        if_dout => sobel_gy_data_stream_dout,
        if_empty_n => sobel_gy_data_stream_empty_n,
        if_read => gradient_decompositi_U0_gy_data_stream_V_read);

    grad_gd_data_stream_s_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_decompositi_U0_gd_data_stream_V_din,
        if_full_n => grad_gd_data_stream_s_full_n,
        if_write => gradient_decompositi_U0_gd_data_stream_V_write,
        if_dout => grad_gd_data_stream_s_dout,
        if_empty_n => grad_gd_data_stream_s_empty_n,
        if_read => nonmax_suppression_U0_gd_data_stream_V_read);

    suppressed_data_stre_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => nonmax_suppression_U0_dst_data_stream_V_din,
        if_full_n => suppressed_data_stre_full_n,
        if_write => nonmax_suppression_U0_dst_data_stream_V_write,
        if_dout => suppressed_data_stre_dout,
        if_empty_n => suppressed_data_stre_empty_n,
        if_read => hysteresis_U0_src_data_stream_V_read);

    canny_edges_data_str_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => hysteresis_U0_dst_data_stream_V_din,
        if_full_n => canny_edges_data_str_full_n,
        if_write => hysteresis_U0_dst_data_stream_V_write,
        if_dout => canny_edges_data_str_dout,
        if_empty_n => canny_edges_data_str_empty_n,
        if_read => Loop_2_proc_U0_canny_edges_data_stream_0_V_read);

    start_for_Duplicate_U0_U : component start_for_Duplicate_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Duplicate_U0_din,
        if_full_n => start_for_Duplicate_U0_full_n,
        if_write => Loop_1_proc_U0_start_write,
        if_dout => start_for_Duplicate_U0_dout,
        if_empty_n => start_for_Duplicate_U0_empty_n,
        if_read => Duplicate_U0_ap_ready);

    start_for_Loop_2_proc_U0_U : component start_for_Loop_2_proc_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Loop_2_proc_U0_din,
        if_full_n => start_for_Loop_2_proc_U0_full_n,
        if_write => Loop_1_proc_U0_start_write,
        if_dout => start_for_Loop_2_proc_U0_dout,
        if_empty_n => start_for_Loop_2_proc_U0_empty_n,
        if_read => Loop_2_proc_U0_ap_ready);

    start_for_Sobel_U0_U : component start_for_Sobel_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Sobel_U0_din,
        if_full_n => start_for_Sobel_U0_full_n,
        if_write => Duplicate_U0_start_write,
        if_dout => start_for_Sobel_U0_dout,
        if_empty_n => start_for_Sobel_U0_empty_n,
        if_read => Sobel_U0_ap_ready);

    start_for_Sobel_1_U0_U : component start_for_Sobel_1_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Sobel_1_U0_din,
        if_full_n => start_for_Sobel_1_U0_full_n,
        if_write => Duplicate_U0_start_write,
        if_dout => start_for_Sobel_1_U0_dout,
        if_empty_n => start_for_Sobel_1_U0_empty_n,
        if_read => Sobel_1_U0_ap_ready);

    start_for_gradient_decompositi_U0_U : component start_for_gradient_decompositi_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_gradient_decompositi_U0_din,
        if_full_n => start_for_gradient_decompositi_U0_full_n,
        if_write => Sobel_U0_start_write,
        if_dout => start_for_gradient_decompositi_U0_dout,
        if_empty_n => start_for_gradient_decompositi_U0_empty_n,
        if_read => gradient_decompositi_U0_ap_ready);

    start_for_nonmax_suppression_U0_U : component start_for_nonmax_suppression_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_nonmax_suppression_U0_din,
        if_full_n => start_for_nonmax_suppression_U0_full_n,
        if_write => gradient_decompositi_U0_start_write,
        if_dout => start_for_nonmax_suppression_U0_dout,
        if_empty_n => start_for_nonmax_suppression_U0_empty_n,
        if_read => nonmax_suppression_U0_ap_ready);

    start_for_hysteresis_U0_U : component start_for_hysteresis_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_hysteresis_U0_din,
        if_full_n => start_for_hysteresis_U0_full_n,
        if_write => nonmax_suppression_U0_start_write,
        if_dout => start_for_hysteresis_U0_dout,
        if_empty_n => start_for_hysteresis_U0_empty_n,
        if_read => hysteresis_U0_ap_ready);





    ap_sync_reg_Block_Mat_exit27932_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_Mat_exit27932_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_Mat_exit27932_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_Mat_exit27932_U0_ap_ready <= ap_sync_Block_Mat_exit27932_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Loop_1_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Loop_1_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Loop_1_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Loop_1_proc_U0_ap_ready <= ap_sync_Loop_1_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    Block_Mat_exit27932_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = Block_Mat_exit27932_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                Block_Mat_exit27932_U0_ap_ready_count <= std_logic_vector(unsigned(Block_Mat_exit27932_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Block_Mat_exit27932_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Block_Mat_exit27932_U0_ap_ready_count <= std_logic_vector(unsigned(Block_Mat_exit27932_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Loop_1_proc_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = Loop_1_proc_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                Loop_1_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_1_proc_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Loop_1_proc_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Loop_1_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_1_proc_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    Block_Mat_exit27932_U0_ap_continue <= ap_const_logic_1;
    Block_Mat_exit27932_U0_ap_start <= ((ap_sync_reg_Block_Mat_exit27932_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_Mat_exit27932_U0_start_full_n <= ap_const_logic_1;
    Block_Mat_exit27932_U0_start_write <= ap_const_logic_0;
    Duplicate_U0_ap_continue <= ap_const_logic_1;
    Duplicate_U0_ap_start <= start_for_Duplicate_U0_empty_n;
    Duplicate_U0_start_full_n <= (start_for_Sobel_U0_full_n and start_for_Sobel_1_U0_full_n);
    INPUT_data_V_TREADY <= Loop_1_proc_U0_in_stream_data_V_TREADY;
    Loop_1_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_1_proc_U0_ap_start <= ((ap_sync_reg_Loop_1_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Loop_1_proc_U0_start_full_n <= (start_for_Loop_2_proc_U0_full_n and start_for_Duplicate_U0_full_n);
    Loop_2_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_2_proc_U0_ap_start <= start_for_Loop_2_proc_U0_empty_n;
    Loop_2_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_2_proc_U0_start_write <= ap_const_logic_0;
    OUTPUT_data_V_TDATA <= Loop_2_proc_U0_out_stream_data_V_TDATA;
    OUTPUT_data_V_TVALID <= Loop_2_proc_U0_out_stream_data_V_TVALID;
    Sobel_1_U0_ap_continue <= ap_const_logic_1;
    Sobel_1_U0_ap_start <= start_for_Sobel_1_U0_empty_n;
    Sobel_1_U0_start_full_n <= ap_const_logic_1;
    Sobel_1_U0_start_write <= ap_const_logic_0;
    Sobel_U0_ap_continue <= ap_const_logic_1;
    Sobel_U0_ap_start <= start_for_Sobel_U0_empty_n;
    ap_done <= Loop_2_proc_U0_ap_done;
    ap_idle <= (nonmax_suppression_U0_ap_idle and hysteresis_U0_ap_idle and gradient_decompositi_U0_ap_idle and Sobel_U0_ap_idle and Sobel_1_U0_ap_idle and Loop_2_proc_U0_ap_idle and Loop_1_proc_U0_ap_idle and Duplicate_U0_ap_idle and Block_Mat_exit27932_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_AXI_LITE_clk_inv_assign_proc : process(ap_rst_n_AXI_LITE_clk)
    begin
                ap_rst_n_AXI_LITE_clk_inv <= not(ap_rst_n_AXI_LITE_clk);
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_Block_Mat_exit27932_U0_ap_ready <= (ap_sync_reg_Block_Mat_exit27932_U0_ap_ready or Block_Mat_exit27932_U0_ap_ready);
    ap_sync_Loop_1_proc_U0_ap_ready <= (ap_sync_reg_Loop_1_proc_U0_ap_ready or Loop_1_proc_U0_ap_ready);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Loop_2_proc_U0_ap_done;
    ap_sync_ready <= (ap_sync_Loop_1_proc_U0_ap_ready and ap_sync_Block_Mat_exit27932_U0_ap_ready);
    gradient_decompositi_U0_ap_continue <= ap_const_logic_1;
    gradient_decompositi_U0_ap_start <= start_for_gradient_decompositi_U0_empty_n;
    hysteresis_U0_ap_continue <= ap_const_logic_1;
    hysteresis_U0_ap_start <= start_for_hysteresis_U0_empty_n;
    hysteresis_U0_start_full_n <= ap_const_logic_1;
    hysteresis_U0_start_write <= ap_const_logic_0;
    nonmax_suppression_U0_ap_continue <= ap_const_logic_1;
    nonmax_suppression_U0_ap_start <= start_for_nonmax_suppression_U0_empty_n;
    start_for_Duplicate_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Loop_2_proc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Sobel_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Sobel_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_gradient_decompositi_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_hysteresis_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_nonmax_suppression_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
