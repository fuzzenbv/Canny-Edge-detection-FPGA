-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hysteresis is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
    src_cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
    src_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    src_data_stream_V_empty_n : IN STD_LOGIC;
    src_data_stream_V_read : OUT STD_LOGIC;
    dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_data_stream_V_full_n : IN STD_LOGIC;
    dst_data_stream_V_write : OUT STD_LOGIC;
    threshold_low : IN STD_LOGIC_VECTOR (31 downto 0);
    threshold_high : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of hysteresis is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv33_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_const_lv33_1FFFFFFFF : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv65_1 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal src_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal or_cond_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal or_cond5_fu_825_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal lhs_V_cast_fu_275_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_fu_279_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal lhs_V_2_cast_fu_285_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_4_fu_289_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_s_fu_307_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_5_fu_312_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_301_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal win_val_0_1_2_load_reg_966 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal win_val_1_1_2_load_reg_971 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_2_1_2_load_reg_976 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_981 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_986 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_991 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_996 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_1001 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_376_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal indvar_flatten_next_reg_1013 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_25_mid1_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_mid1_reg_1018 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_1023 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_mid1_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_mid1_reg_1028 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_mid1_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_mid1_reg_1033 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_mid2_fu_439_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_mid2_reg_1038 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_assign_mid2_fu_447_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_assign_mid2_reg_1043 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state8 : BOOLEAN;
    signal tmp_26_mid2_fu_459_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_mid2_reg_1051 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_mid2_fu_464_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_mid2_reg_1056 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_mid2_fu_469_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_mid2_reg_1061 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_cast_mid2_cas_fu_474_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_30_cast_mid2_cas_reg_1066 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_29_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_reg_1071 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_1078 : STD_LOGIC_VECTOR (0 downto 0);
    signal linebuff_val_1_addr_reg_1082 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuff_val_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp0_reg_1092 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal or_cond4_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_reg_1097 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_36_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_reg_1102 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt4_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt4_reg_1107 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt5_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt5_reg_1112 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt6_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt6_reg_1117 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt7_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt7_reg_1122 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt8_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt8_reg_1127 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp27_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp27_reg_1132 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_830_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state11 : BOOLEAN;
    signal linebuff_val_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuff_val_0_ce0 : STD_LOGIC;
    signal linebuff_val_0_we0 : STD_LOGIC;
    signal linebuff_val_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuff_val_1_ce0 : STD_LOGIC;
    signal linebuff_val_1_we0 : STD_LOGIC;
    signal linebuff_val_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_reg_232 : STD_LOGIC_VECTOR (64 downto 0);
    signal t_V_reg_243 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_2_reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_494_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal win_val_0_1_fu_120 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_0_0_0_win_va_fu_541_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_0_1_2_fu_124 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_1_1_fu_128 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_1_0_0_win_va_fu_534_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_1_1_2_fu_132 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_2_1_fu_136 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_2_0_0_win_va_fu_527_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_2_1_2_fu_140 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_1_fu_144 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp0_1_fu_148 : STD_LOGIC_VECTOR (15 downto 0);
    signal element_gd_1_fu_152 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_301_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_301_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_fu_335_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_cast_mid1_fu_326_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_30_cast_fu_362_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal i_V_fu_397_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_fu_412_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_cast_fu_403_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_25_mid2_fu_454_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_fu_548_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp3_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp25_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp24_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_583_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp6_demorgan_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal slt_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_592_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt1_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_596_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt2_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_fu_600_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt3_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_603_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_607_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_fu_610_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_614_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_fu_618_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rev_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev2_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev3_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp28_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp29_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp26_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev4_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev5_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev7_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev8_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp32_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev6_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp33_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp30_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp31_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp34_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_demorgan_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_301_p00 : STD_LOGIC_VECTOR (64 downto 0);
    signal grp_fu_301_p10 : STD_LOGIC_VECTOR (64 downto 0);

    component canny_edge_mul_33ns_33ns_65_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (32 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (64 downto 0) );
    end component;


    component hysteresis_linebuff_val_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    linebuff_val_0_U : component hysteresis_linebuff_val_0
    generic map (
        DataWidth => 16,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuff_val_0_address0,
        ce0 => linebuff_val_0_ce0,
        we0 => linebuff_val_0_we0,
        d0 => element_gd_1_fu_152,
        q0 => linebuff_val_0_q0);

    linebuff_val_1_U : component hysteresis_linebuff_val_0
    generic map (
        DataWidth => 16,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuff_val_1_address0,
        ce0 => linebuff_val_1_ce0,
        we0 => linebuff_val_1_we0,
        d0 => tmp0_reg_1092,
        q0 => linebuff_val_1_q0);

    canny_edge_mul_33ns_33ns_65_5_1_U63 : component canny_edge_mul_33ns_33ns_65_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 33,
        din1_WIDTH => 33,
        dout_WIDTH => 65)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_301_p0,
        din1 => grp_fu_301_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_301_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((exitcond_flatten_fu_371_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((or_cond5_fu_825_p2 = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                indvar_flatten_reg_232 <= indvar_flatten_next_reg_1013;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten_reg_232 <= ap_const_lv65_0;
            end if; 
        end if;
    end process;

    t_V_2_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((or_cond5_fu_825_p2 = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                t_V_2_reg_254 <= j_V_fu_830_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                t_V_2_reg_254 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    t_V_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((or_cond5_fu_825_p2 = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                t_V_reg_243 <= t_V_mid2_reg_1038;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                t_V_reg_243 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((or_cond_fu_483_p2 = ap_const_lv1_1) and (src_data_stream_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                col_assign_mid2_reg_1043 <= col_assign_mid2_fu_447_p3;
                or_cond_reg_1078 <= or_cond_fu_483_p2;
                tmp_26_mid2_reg_1051 <= tmp_26_mid2_fu_459_p3;
                tmp_27_mid2_reg_1056 <= tmp_27_mid2_fu_464_p3;
                tmp_28_mid2_reg_1061 <= tmp_28_mid2_fu_469_p3;
                tmp_29_reg_1071 <= tmp_29_fu_478_p2;
                    tmp_30_cast_mid2_cas_reg_1066(31 downto 0) <= tmp_30_cast_mid2_cas_fu_474_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((or_cond_fu_483_p2 = ap_const_lv1_1) and (src_data_stream_V_empty_n = ap_const_logic_0))) and (or_cond_fu_483_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                element_gd_1_fu_152 <= src_data_stream_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_371_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                icmp2_reg_1023 <= icmp2_fu_422_p2;
                t_V_mid2_reg_1038 <= t_V_mid2_fu_439_p3;
                tmp_25_mid1_reg_1018 <= tmp_25_mid1_fu_407_p2;
                tmp_27_mid1_reg_1028 <= tmp_27_mid1_fu_428_p2;
                tmp_28_mid1_reg_1033 <= tmp_28_mid1_fu_434_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_reg_986 <= icmp_fu_345_p2;
                indvar_flatten_next_reg_1013 <= indvar_flatten_next_fu_376_p2;
                tmp_24_reg_981 <= tmp_24_fu_330_p2;
                tmp_26_reg_991 <= tmp_26_fu_351_p2;
                tmp_27_reg_996 <= tmp_27_fu_357_p2;
                tmp_28_reg_1001 <= tmp_28_fu_366_p2;
                win_val_0_1_2_fu_124 <= win_val_0_1_fu_120;
                win_val_0_1_2_load_reg_966 <= win_val_0_1_2_fu_124;
                win_val_1_1_2_fu_132 <= win_val_1_1_fu_128;
                win_val_1_1_2_load_reg_971 <= win_val_1_1_2_fu_132;
                win_val_2_1_2_fu_140 <= win_val_2_1_fu_136;
                win_val_2_1_2_load_reg_976 <= win_val_2_1_2_fu_140;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((or_cond_fu_483_p2 = ap_const_lv1_1) and (src_data_stream_V_empty_n = ap_const_logic_0))) and (tmp_29_fu_478_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                linebuff_val_1_addr_reg_1082 <= tmp_31_fu_494_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                or_cond4_reg_1097 <= or_cond4_fu_577_p2;
                slt4_reg_1107 <= slt4_fu_677_p2;
                slt5_reg_1112 <= slt5_fu_682_p2;
                slt6_reg_1117 <= slt6_fu_687_p2;
                slt7_reg_1122 <= slt7_fu_692_p2;
                slt8_reg_1127 <= slt8_fu_697_p2;
                tmp27_reg_1132 <= tmp27_fu_720_p2;
                tmp_36_reg_1102 <= tmp_36_fu_587_p2;
                win_val_0_1_fu_120 <= win_val_0_0_0_win_va_fu_541_p3;
                win_val_1_1_fu_128 <= win_val_1_0_0_win_va_fu_534_p3;
                win_val_2_1_fu_136 <= win_val_2_0_0_win_va_fu_527_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp0_1_fu_148 <= linebuff_val_0_q0;
                tmp0_reg_1092 <= linebuff_val_0_q0;
                tmp1_1_fu_144 <= linebuff_val_1_q0;
            end if;
        end if;
    end process;
    tmp_30_cast_mid2_cas_reg_1066(32) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, src_data_stream_V_empty_n, dst_data_stream_V_full_n, ap_CS_fsm_state8, or_cond_fu_483_p2, ap_CS_fsm_state11, or_cond5_fu_825_p2, ap_CS_fsm_state7, exitcond_flatten_fu_371_p2, tmp_29_fu_478_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((exitcond_flatten_fu_371_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not(((or_cond_fu_483_p2 = ap_const_lv1_1) and (src_data_stream_V_empty_n = ap_const_logic_0))) and (tmp_29_fu_478_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif ((not(((or_cond_fu_483_p2 = ap_const_lv1_1) and (src_data_stream_V_empty_n = ap_const_logic_0))) and (tmp_29_fu_478_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if ((not(((or_cond5_fu_825_p2 = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state11_assign_proc : process(dst_data_stream_V_full_n, or_cond5_fu_825_p2)
    begin
                ap_block_state11 <= ((or_cond5_fu_825_p2 = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0));
    end process;


    ap_block_state8_assign_proc : process(src_data_stream_V_empty_n, or_cond_fu_483_p2)
    begin
                ap_block_state8 <= ((or_cond_fu_483_p2 = ap_const_lv1_1) and (src_data_stream_V_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state7, exitcond_flatten_fu_371_p2)
    begin
        if (((exitcond_flatten_fu_371_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, exitcond_flatten_fu_371_p2)
    begin
        if (((exitcond_flatten_fu_371_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_assign_mid2_fu_447_p3 <= 
        t_V_2_reg_254 when (tmp_28_reg_1001(0) = '1') else 
        ap_const_lv32_0;

    dst_data_stream_V_blk_n_assign_proc : process(dst_data_stream_V_full_n, ap_CS_fsm_state11, or_cond5_fu_825_p2)
    begin
        if (((or_cond5_fu_825_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            dst_data_stream_V_blk_n <= dst_data_stream_V_full_n;
        else 
            dst_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_V_din <= 
        ap_const_lv8_FF when (tmp_45_fu_805_p2(0) = '1') else 
        ap_const_lv8_0;

    dst_data_stream_V_write_assign_proc : process(dst_data_stream_V_full_n, ap_CS_fsm_state11, or_cond5_fu_825_p2)
    begin
        if ((not(((or_cond5_fu_825_p2 = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0))) and (or_cond5_fu_825_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            dst_data_stream_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_371_p2 <= "1" when (indvar_flatten_reg_232 = grp_fu_301_p2) else "0";
    grp_fu_301_p0 <= grp_fu_301_p00(33 - 1 downto 0);
    grp_fu_301_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_279_p2),65));
    grp_fu_301_p1 <= grp_fu_301_p10(33 - 1 downto 0);
    grp_fu_301_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_4_fu_289_p2),65));
    i_V_fu_397_p2 <= std_logic_vector(unsigned(t_V_reg_243) + unsigned(ap_const_lv32_1));
    icmp2_fu_422_p2 <= "1" when (tmp_46_fu_412_p4 = ap_const_lv31_0) else "0";
    icmp3_fu_557_p2 <= "1" when (tmp_50_fu_548_p4 = ap_const_lv31_0) else "0";
    icmp_fu_345_p2 <= "1" when (tmp_fu_335_p4 = ap_const_lv31_0) else "0";
    indvar_flatten_next_fu_376_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_232) + unsigned(ap_const_lv65_1));
    j_V_fu_830_p2 <= std_logic_vector(unsigned(col_assign_mid2_reg_1043) + unsigned(ap_const_lv32_1));
    lhs_V_2_cast_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_cols_V),33));
    lhs_V_cast_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(src_rows_V),33));

    linebuff_val_0_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state10, tmp_31_fu_494_p1, tmp_32_fu_514_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            linebuff_val_0_address0 <= tmp_32_fu_514_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            linebuff_val_0_address0 <= tmp_31_fu_494_p1(11 - 1 downto 0);
        else 
            linebuff_val_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    linebuff_val_0_ce0_assign_proc : process(src_data_stream_V_empty_n, ap_CS_fsm_state8, or_cond_fu_483_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (not(((or_cond_fu_483_p2 = ap_const_lv1_1) and (src_data_stream_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            linebuff_val_0_ce0 <= ap_const_logic_1;
        else 
            linebuff_val_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuff_val_0_we0_assign_proc : process(or_cond_reg_1078, ap_CS_fsm_state10)
    begin
        if (((or_cond_reg_1078 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            linebuff_val_0_we0 <= ap_const_logic_1;
        else 
            linebuff_val_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuff_val_1_address0_assign_proc : process(ap_CS_fsm_state8, linebuff_val_1_addr_reg_1082, ap_CS_fsm_state10, tmp_31_fu_494_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            linebuff_val_1_address0 <= linebuff_val_1_addr_reg_1082;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            linebuff_val_1_address0 <= tmp_31_fu_494_p1(11 - 1 downto 0);
        else 
            linebuff_val_1_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    linebuff_val_1_ce0_assign_proc : process(src_data_stream_V_empty_n, ap_CS_fsm_state8, or_cond_fu_483_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (not(((or_cond_fu_483_p2 = ap_const_lv1_1) and (src_data_stream_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            linebuff_val_1_ce0 <= ap_const_logic_1;
        else 
            linebuff_val_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuff_val_1_we0_assign_proc : process(tmp_29_reg_1071, ap_CS_fsm_state10)
    begin
        if (((tmp_29_reg_1071 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            linebuff_val_1_we0 <= ap_const_logic_1;
        else 
            linebuff_val_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond4_fu_577_p2 <= (tmp25_fu_572_p2 or tmp24_fu_567_p2);
    or_cond5_fu_825_p2 <= (tmp_47_fu_820_p2 or tmp_27_mid2_reg_1056);
    or_cond_fu_483_p2 <= (tmp_29_fu_478_p2 and tmp_25_mid2_fu_454_p3);
    ret_V_4_fu_289_p2 <= std_logic_vector(unsigned(lhs_V_2_cast_fu_285_p1) + unsigned(ap_const_lv33_1));
    ret_V_5_fu_312_p2 <= std_logic_vector(unsigned(lhs_V_2_cast_fu_285_p1) + unsigned(ap_const_lv33_1FFFFFFFF));
    ret_V_fu_279_p2 <= std_logic_vector(unsigned(lhs_V_cast_fu_275_p1) + unsigned(ap_const_lv33_1));
    rev1_fu_649_p2 <= (slt1_fu_644_p2 xor ap_const_lv1_1);
    rev2_fu_660_p2 <= (slt2_fu_655_p2 xor ap_const_lv1_1);
    rev3_fu_671_p2 <= (slt3_fu_666_p2 xor ap_const_lv1_1);
    rev4_fu_741_p2 <= (slt4_reg_1107 xor ap_const_lv1_1);
    rev5_fu_746_p2 <= (slt5_reg_1112 xor ap_const_lv1_1);
    rev6_fu_751_p2 <= (slt6_reg_1117 xor ap_const_lv1_1);
    rev7_fu_756_p2 <= (slt7_reg_1122 xor ap_const_lv1_1);
    rev8_fu_761_p2 <= (slt8_reg_1127 xor ap_const_lv1_1);
    rev_fu_638_p2 <= (slt_fu_633_p2 xor ap_const_lv1_1);
    sel_tmp4_fu_790_p2 <= (tmp31_fu_784_p2 and tmp27_reg_1132);
    sel_tmp6_demorgan_fu_621_p2 <= (tmp_36_fu_587_p2 or or_cond4_fu_577_p2);
    sel_tmp6_fu_627_p2 <= (sel_tmp6_demorgan_fu_621_p2 xor ap_const_lv1_1);
    slt1_fu_644_p2 <= "1" when (signed(threshold_high) < signed(tmp_37_fu_592_p1)) else "0";
    slt2_fu_655_p2 <= "1" when (signed(threshold_high) < signed(tmp_38_fu_596_p1)) else "0";
    slt3_fu_666_p2 <= "1" when (signed(threshold_high) < signed(tmp_39_fu_600_p1)) else "0";
    slt4_fu_677_p2 <= "1" when (signed(threshold_high) < signed(tmp_40_fu_603_p1)) else "0";
    slt5_fu_682_p2 <= "1" when (signed(threshold_high) < signed(tmp_41_fu_607_p1)) else "0";
    slt6_fu_687_p2 <= "1" when (signed(threshold_high) < signed(tmp_42_fu_610_p1)) else "0";
    slt7_fu_692_p2 <= "1" when (signed(threshold_high) < signed(tmp_43_fu_614_p1)) else "0";
    slt8_fu_697_p2 <= "1" when (signed(threshold_high) < signed(tmp_44_fu_618_p1)) else "0";
    slt_fu_633_p2 <= "1" when (signed(threshold_high) < signed(tmp_35_fu_583_p1)) else "0";

    src_data_stream_V_blk_n_assign_proc : process(src_data_stream_V_empty_n, ap_CS_fsm_state8, or_cond_fu_483_p2)
    begin
        if (((or_cond_fu_483_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            src_data_stream_V_blk_n <= src_data_stream_V_empty_n;
        else 
            src_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_V_read_assign_proc : process(src_data_stream_V_empty_n, ap_CS_fsm_state8, or_cond_fu_483_p2)
    begin
        if ((not(((or_cond_fu_483_p2 = ap_const_lv1_1) and (src_data_stream_V_empty_n = ap_const_logic_0))) and (or_cond_fu_483_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            src_data_stream_V_read <= ap_const_logic_1;
        else 
            src_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    t_V_mid2_fu_439_p3 <= 
        t_V_reg_243 when (tmp_28_fu_366_p2(0) = '1') else 
        i_V_fu_397_p2;
    tmp24_fu_567_p2 <= (tmp_28_mid2_reg_1061 or icmp3_fu_557_p2);
    tmp25_fu_572_p2 <= (tmp_34_fu_563_p2 or tmp_26_mid2_reg_1051);
    tmp26_fu_702_p2 <= (sel_tmp6_fu_627_p2 and rev_fu_638_p2);
    tmp27_fu_720_p2 <= (tmp29_fu_714_p2 and tmp26_fu_702_p2);
    tmp28_fu_708_p2 <= (rev3_fu_671_p2 and rev2_fu_660_p2);
    tmp29_fu_714_p2 <= (tmp28_fu_708_p2 and rev1_fu_649_p2);
    tmp30_fu_766_p2 <= (rev5_fu_746_p2 and rev4_fu_741_p2);
    tmp31_fu_784_p2 <= (tmp33_fu_778_p2 and tmp30_fu_766_p2);
    tmp32_fu_772_p2 <= (rev8_fu_761_p2 and rev7_fu_756_p2);
    tmp33_fu_778_p2 <= (tmp32_fu_772_p2 and rev6_fu_751_p2);
    tmp34_fu_795_p2 <= (sel_tmp4_fu_790_p2 or or_cond4_reg_1097);
    tmp_24_fu_330_p2 <= "1" when (unsigned(t_V_reg_243) < unsigned(src_rows_V)) else "0";
    tmp_25_mid1_fu_407_p2 <= "1" when (unsigned(i_V_fu_397_p2) < unsigned(src_rows_V)) else "0";
    tmp_25_mid2_fu_454_p3 <= 
        tmp_24_reg_981 when (tmp_28_reg_1001(0) = '1') else 
        tmp_25_mid1_reg_1018;
    tmp_26_fu_351_p2 <= "1" when (t_V_reg_243 = ap_const_lv32_0) else "0";
    tmp_26_mid2_fu_459_p3 <= 
        icmp_reg_986 when (tmp_28_reg_1001(0) = '1') else 
        icmp2_reg_1023;
    tmp_27_fu_357_p2 <= "1" when (signed(tmp_cast_mid1_fu_326_p1) > signed(tmp_s_fu_307_p2)) else "0";
    tmp_27_mid1_fu_428_p2 <= "1" when (i_V_fu_397_p2 = ap_const_lv32_0) else "0";
    tmp_27_mid2_fu_464_p3 <= 
        tmp_26_reg_991 when (tmp_28_reg_1001(0) = '1') else 
        tmp_27_mid1_reg_1028;
    tmp_28_fu_366_p2 <= "1" when (unsigned(tmp_30_cast_fu_362_p1) < unsigned(ret_V_4_fu_289_p2)) else "0";
    tmp_28_mid1_fu_434_p2 <= "1" when (signed(tmp_cast_fu_403_p1) > signed(tmp_s_fu_307_p2)) else "0";
    tmp_28_mid2_fu_469_p3 <= 
        tmp_27_reg_996 when (tmp_28_reg_1001(0) = '1') else 
        tmp_28_mid1_reg_1033;
    tmp_29_fu_478_p2 <= "1" when (unsigned(col_assign_mid2_fu_447_p3) < unsigned(src_cols_V)) else "0";
    tmp_30_cast_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_2_reg_254),33));
    tmp_30_cast_mid2_cas_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_mid2_fu_447_p3),33));
    tmp_31_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_mid2_fu_447_p3),64));
    tmp_32_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_mid2_reg_1043),64));
    tmp_34_fu_563_p2 <= "1" when (signed(tmp_30_cast_mid2_cas_reg_1066) > signed(ret_V_5_fu_312_p2)) else "0";
    tmp_35_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_1_1_fu_128),32));
    tmp_36_fu_587_p2 <= "1" when (signed(tmp_35_fu_583_p1) < signed(threshold_low)) else "0";
    tmp_37_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_0_0_0_win_va_fu_541_p3),32));
    tmp_38_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_0_1_fu_120),32));
    tmp_39_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_0_1_2_load_reg_966),32));
    tmp_40_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_1_0_0_win_va_fu_534_p3),32));
    tmp_41_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_1_1_2_load_reg_971),32));
    tmp_42_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_2_0_0_win_va_fu_527_p3),32));
    tmp_43_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_2_1_fu_136),32));
    tmp_44_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(win_val_2_1_2_load_reg_976),32));
    tmp_45_fu_805_p2 <= (tmp_55_demorgan_fu_800_p2 xor ap_const_lv1_1);
    tmp_46_fu_412_p4 <= i_V_fu_397_p2(31 downto 1);
    tmp_47_fu_820_p2 <= "1" when (col_assign_mid2_reg_1043 = ap_const_lv32_0) else "0";
    tmp_50_fu_548_p4 <= col_assign_mid2_reg_1043(31 downto 1);
    tmp_55_demorgan_fu_800_p2 <= (tmp_36_reg_1102 or tmp34_fu_795_p2);
    tmp_cast_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_V_fu_397_p2),33));
    tmp_cast_mid1_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_243),33));
    tmp_fu_335_p4 <= t_V_reg_243(31 downto 1);
    tmp_s_fu_307_p2 <= std_logic_vector(unsigned(lhs_V_cast_fu_275_p1) + unsigned(ap_const_lv33_1FFFFFFFF));
    win_val_0_0_0_win_va_fu_541_p3 <= 
        element_gd_1_fu_152 when (tmp_29_reg_1071(0) = '1') else 
        win_val_0_1_fu_120;
    win_val_1_0_0_win_va_fu_534_p3 <= 
        tmp0_1_fu_148 when (tmp_29_reg_1071(0) = '1') else 
        win_val_1_1_fu_128;
    win_val_2_0_0_win_va_fu_527_p3 <= 
        tmp1_1_fu_144 when (tmp_29_reg_1071(0) = '1') else 
        win_val_2_1_fu_136;
end behav;
