-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_1_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    packets_cast_loc_dout : IN STD_LOGIC_VECTOR (19 downto 0);
    packets_cast_loc_empty_n : IN STD_LOGIC;
    packets_cast_loc_read : OUT STD_LOGIC;
    in_stream_data_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_data_V_TVALID : IN STD_LOGIC;
    in_stream_data_V_TREADY : OUT STD_LOGIC;
    src_bw_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    src_bw_data_stream_0_V_full_n : IN STD_LOGIC;
    src_bw_data_stream_0_V_write : OUT STD_LOGIC;
    packets_cast_loc_out_din : OUT STD_LOGIC_VECTOR (19 downto 0);
    packets_cast_loc_out_full_n : IN STD_LOGIC;
    packets_cast_loc_out_write : OUT STD_LOGIC );
end;


architecture behav of Loop_1_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal in_stream_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_data_V_0_vld_in : STD_LOGIC;
    signal in_stream_data_V_0_vld_out : STD_LOGIC;
    signal in_stream_data_V_0_ack_in : STD_LOGIC;
    signal in_stream_data_V_0_ack_out : STD_LOGIC;
    signal in_stream_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_data_V_0_sel_rd : STD_LOGIC := '0';
    signal in_stream_data_V_0_sel_wr : STD_LOGIC := '0';
    signal in_stream_data_V_0_sel : STD_LOGIC;
    signal in_stream_data_V_0_load_A : STD_LOGIC;
    signal in_stream_data_V_0_load_B : STD_LOGIC;
    signal in_stream_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_stream_data_V_0_state_cmp_full : STD_LOGIC;
    signal packets_cast_loc_blk_n : STD_LOGIC;
    signal in_stream_data_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_i_i_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal src_bw_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal packets_cast_loc_out_blk_n : STD_LOGIC;
    signal packets_cast_loc_rea_reg_188 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal r_fu_147_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_reg_196 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal tmp_72_reg_201 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_73_reg_206 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_74_reg_211 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0171_rec_i_i_reg_127 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_fu_153_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_cast_i_i_fu_138_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not((((tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (src_bw_data_stream_0_V_full_n = ap_const_logic_0)) or ((tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (in_stream_data_V_0_vld_out = ap_const_logic_0)))) and (tmp_i_i_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    in_stream_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_stream_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((in_stream_data_V_0_ack_out = ap_const_logic_1) and (in_stream_data_V_0_vld_out = ap_const_logic_1))) then 
                                        in_stream_data_V_0_sel_rd <= not(in_stream_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_stream_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_stream_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((in_stream_data_V_0_ack_in = ap_const_logic_1) and (in_stream_data_V_0_vld_in = ap_const_logic_1))) then 
                                        in_stream_data_V_0_sel_wr <= not(in_stream_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_stream_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_stream_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((in_stream_data_V_0_state = ap_const_lv2_2) and (in_stream_data_V_0_vld_in = ap_const_logic_0)) or ((in_stream_data_V_0_state = ap_const_lv2_3) and (in_stream_data_V_0_vld_in = ap_const_logic_0) and (in_stream_data_V_0_ack_out = ap_const_logic_1)))) then 
                    in_stream_data_V_0_state <= ap_const_lv2_2;
                elsif ((((in_stream_data_V_0_state = ap_const_lv2_1) and (in_stream_data_V_0_ack_out = ap_const_logic_0)) or ((in_stream_data_V_0_state = ap_const_lv2_3) and (in_stream_data_V_0_ack_out = ap_const_logic_0) and (in_stream_data_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((in_stream_data_V_0_vld_in = ap_const_logic_0) and (in_stream_data_V_0_ack_out = ap_const_logic_1))) and not(((in_stream_data_V_0_ack_out = ap_const_logic_0) and (in_stream_data_V_0_vld_in = ap_const_logic_1))) and (in_stream_data_V_0_state = ap_const_lv2_3)) or ((in_stream_data_V_0_state = ap_const_lv2_1) and (in_stream_data_V_0_ack_out = ap_const_logic_1)) or ((in_stream_data_V_0_state = ap_const_lv2_2) and (in_stream_data_V_0_vld_in = ap_const_logic_1)))) then 
                    in_stream_data_V_0_state <= ap_const_lv2_3;
                else 
                    in_stream_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    p_0171_rec_i_i_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (src_bw_data_stream_0_V_full_n = ap_const_logic_1))) then 
                p_0171_rec_i_i_reg_127 <= r_reg_196;
            elsif ((not(((packets_cast_loc_empty_n = ap_const_logic_0) or (packets_cast_loc_out_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_0171_rec_i_i_reg_127 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_stream_data_V_0_load_A = ap_const_logic_1)) then
                in_stream_data_V_0_payload_A <= in_stream_data_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((in_stream_data_V_0_load_B = ap_const_logic_1)) then
                in_stream_data_V_0_payload_B <= in_stream_data_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((packets_cast_loc_empty_n = ap_const_logic_0) or (packets_cast_loc_out_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                packets_cast_loc_rea_reg_188 <= packets_cast_loc_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (src_bw_data_stream_0_V_full_n = ap_const_logic_0)) or ((tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (in_stream_data_V_0_vld_out = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                r_reg_196 <= r_fu_147_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (src_bw_data_stream_0_V_full_n = ap_const_logic_0)) or ((tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (in_stream_data_V_0_vld_out = ap_const_logic_0)))) and (tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_72_reg_201 <= in_stream_data_V_0_data_out(15 downto 8);
                tmp_73_reg_206 <= in_stream_data_V_0_data_out(23 downto 16);
                tmp_74_reg_211 <= in_stream_data_V_0_data_out(31 downto 24);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, packets_cast_loc_empty_n, in_stream_data_V_0_vld_out, src_bw_data_stream_0_V_full_n, packets_cast_loc_out_full_n, ap_CS_fsm_state2, tmp_i_i_fu_142_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((packets_cast_loc_empty_n = ap_const_logic_0) or (packets_cast_loc_out_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not((((tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (src_bw_data_stream_0_V_full_n = ap_const_logic_0)) or ((tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (in_stream_data_V_0_vld_out = ap_const_logic_0)))) and (tmp_i_i_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not((((tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (src_bw_data_stream_0_V_full_n = ap_const_logic_0)) or ((tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (in_stream_data_V_0_vld_out = ap_const_logic_0)))) and (tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (src_bw_data_stream_0_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (src_bw_data_stream_0_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (src_bw_data_stream_0_V_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, packets_cast_loc_empty_n, packets_cast_loc_out_full_n)
    begin
                ap_block_state1 <= ((packets_cast_loc_empty_n = ap_const_logic_0) or (packets_cast_loc_out_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(in_stream_data_V_0_vld_out, src_bw_data_stream_0_V_full_n, tmp_i_i_fu_142_p2)
    begin
                ap_block_state2 <= (((tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (src_bw_data_stream_0_V_full_n = ap_const_logic_0)) or ((tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (in_stream_data_V_0_vld_out = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, in_stream_data_V_0_vld_out, src_bw_data_stream_0_V_full_n, ap_CS_fsm_state2, tmp_i_i_fu_142_p2)
    begin
        if ((not((((tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (src_bw_data_stream_0_V_full_n = ap_const_logic_0)) or ((tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (in_stream_data_V_0_vld_out = ap_const_logic_0)))) and (tmp_i_i_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    in_stream_data_V_0_ack_in <= in_stream_data_V_0_state(1);

    in_stream_data_V_0_ack_out_assign_proc : process(in_stream_data_V_0_vld_out, src_bw_data_stream_0_V_full_n, ap_CS_fsm_state2, tmp_i_i_fu_142_p2)
    begin
        if ((not((((tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (src_bw_data_stream_0_V_full_n = ap_const_logic_0)) or ((tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (in_stream_data_V_0_vld_out = ap_const_logic_0)))) and (tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_stream_data_V_0_ack_out <= ap_const_logic_1;
        else 
            in_stream_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_data_V_0_data_out_assign_proc : process(in_stream_data_V_0_payload_A, in_stream_data_V_0_payload_B, in_stream_data_V_0_sel)
    begin
        if ((in_stream_data_V_0_sel = ap_const_logic_1)) then 
            in_stream_data_V_0_data_out <= in_stream_data_V_0_payload_B;
        else 
            in_stream_data_V_0_data_out <= in_stream_data_V_0_payload_A;
        end if; 
    end process;

    in_stream_data_V_0_load_A <= (in_stream_data_V_0_state_cmp_full and not(in_stream_data_V_0_sel_wr));
    in_stream_data_V_0_load_B <= (in_stream_data_V_0_state_cmp_full and in_stream_data_V_0_sel_wr);
    in_stream_data_V_0_sel <= in_stream_data_V_0_sel_rd;
    in_stream_data_V_0_state_cmp_full <= '0' when (in_stream_data_V_0_state = ap_const_lv2_1) else '1';
    in_stream_data_V_0_vld_in <= in_stream_data_V_TVALID;
    in_stream_data_V_0_vld_out <= in_stream_data_V_0_state(0);

    in_stream_data_V_TDATA_blk_n_assign_proc : process(in_stream_data_V_0_state, ap_CS_fsm_state2, tmp_i_i_fu_142_p2)
    begin
        if (((tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_stream_data_V_TDATA_blk_n <= in_stream_data_V_0_state(0);
        else 
            in_stream_data_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_stream_data_V_TREADY <= in_stream_data_V_0_state(1);

    internal_ap_ready_assign_proc : process(in_stream_data_V_0_vld_out, src_bw_data_stream_0_V_full_n, ap_CS_fsm_state2, tmp_i_i_fu_142_p2)
    begin
        if ((not((((tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (src_bw_data_stream_0_V_full_n = ap_const_logic_0)) or ((tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (in_stream_data_V_0_vld_out = ap_const_logic_0)))) and (tmp_i_i_fu_142_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    packets_cast_loc_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, packets_cast_loc_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            packets_cast_loc_blk_n <= packets_cast_loc_empty_n;
        else 
            packets_cast_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    packets_cast_loc_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, packets_cast_loc_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            packets_cast_loc_out_blk_n <= packets_cast_loc_out_full_n;
        else 
            packets_cast_loc_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    packets_cast_loc_out_din <= packets_cast_loc_dout;

    packets_cast_loc_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, packets_cast_loc_empty_n, packets_cast_loc_out_full_n)
    begin
        if ((not(((packets_cast_loc_empty_n = ap_const_logic_0) or (packets_cast_loc_out_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            packets_cast_loc_out_write <= ap_const_logic_1;
        else 
            packets_cast_loc_out_write <= ap_const_logic_0;
        end if; 
    end process;


    packets_cast_loc_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, packets_cast_loc_empty_n, packets_cast_loc_out_full_n)
    begin
        if ((not(((packets_cast_loc_empty_n = ap_const_logic_0) or (packets_cast_loc_out_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            packets_cast_loc_read <= ap_const_logic_1;
        else 
            packets_cast_loc_read <= ap_const_logic_0;
        end if; 
    end process;

    r_cast_i_i_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0171_rec_i_i_reg_127),20));
    r_fu_147_p2 <= std_logic_vector(unsigned(p_0171_rec_i_i_reg_127) + unsigned(ap_const_lv19_1));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    src_bw_data_stream_0_V_blk_n_assign_proc : process(src_bw_data_stream_0_V_full_n, ap_CS_fsm_state2, tmp_i_i_fu_142_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            src_bw_data_stream_0_V_blk_n <= src_bw_data_stream_0_V_full_n;
        else 
            src_bw_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_bw_data_stream_0_V_din_assign_proc : process(in_stream_data_V_0_vld_out, src_bw_data_stream_0_V_full_n, ap_CS_fsm_state2, tmp_i_i_fu_142_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_72_reg_201, tmp_73_reg_206, tmp_74_reg_211, tmp_fu_153_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (src_bw_data_stream_0_V_full_n = ap_const_logic_1))) then 
            src_bw_data_stream_0_V_din <= tmp_74_reg_211;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (src_bw_data_stream_0_V_full_n = ap_const_logic_1))) then 
            src_bw_data_stream_0_V_din <= tmp_73_reg_206;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (src_bw_data_stream_0_V_full_n = ap_const_logic_1))) then 
            src_bw_data_stream_0_V_din <= tmp_72_reg_201;
        elsif ((not((((tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (src_bw_data_stream_0_V_full_n = ap_const_logic_0)) or ((tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (in_stream_data_V_0_vld_out = ap_const_logic_0)))) and (tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            src_bw_data_stream_0_V_din <= tmp_fu_153_p1;
        else 
            src_bw_data_stream_0_V_din <= "XXXXXXXX";
        end if; 
    end process;


    src_bw_data_stream_0_V_write_assign_proc : process(in_stream_data_V_0_vld_out, src_bw_data_stream_0_V_full_n, ap_CS_fsm_state2, tmp_i_i_fu_142_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (src_bw_data_stream_0_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (src_bw_data_stream_0_V_full_n = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (src_bw_data_stream_0_V_full_n = ap_const_logic_1)) or (not((((tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (src_bw_data_stream_0_V_full_n = ap_const_logic_0)) or ((tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (in_stream_data_V_0_vld_out = ap_const_logic_0)))) and (tmp_i_i_fu_142_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            src_bw_data_stream_0_V_write <= ap_const_logic_1;
        else 
            src_bw_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_153_p1 <= in_stream_data_V_0_data_out(8 - 1 downto 0);
    tmp_i_i_fu_142_p2 <= "1" when (signed(r_cast_i_i_fu_138_p1) < signed(packets_cast_loc_rea_reg_188)) else "0";
end behav;
