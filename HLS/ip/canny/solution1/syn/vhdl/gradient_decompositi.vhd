-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gradient_decompositi is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    gx_rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
    gx_cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
    gx_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    gx_data_stream_V_empty_n : IN STD_LOGIC;
    gx_data_stream_V_read : OUT STD_LOGIC;
    gy_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    gy_data_stream_V_empty_n : IN STD_LOGIC;
    gy_data_stream_V_read : OUT STD_LOGIC;
    gd_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    gd_data_stream_V_full_n : IN STD_LOGIC;
    gd_data_stream_V_write : OUT STD_LOGIC );
end;


architecture behav of gradient_decompositi is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal gx_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gy_data_stream_V_blk_n : STD_LOGIC;
    signal gd_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal i_V_fu_200_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_V_reg_559 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal j_V_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_V_reg_567 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal tmp_67_reg_572 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_68_reg_581 : STD_LOGIC_VECTOR (15 downto 0);
    signal xs_V_3_fu_217_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xs_V_3_reg_590 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_reg_595 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_V_4_fu_231_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xs_V_4_reg_601 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_2_reg_606 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_reg_612 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sel_tmp4_fu_493_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp4_reg_617 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp8_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_reg_622 : STD_LOGIC_VECTOR (0 downto 0);
    signal abs_g1_fu_519_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal abs_g1_reg_627 : STD_LOGIC_VECTOR (13 downto 0);
    signal t_V_reg_173 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_3_reg_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond8_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_245_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_4_fu_260_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal abs_gy_fu_269_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal abs_gx_fu_254_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_55_fu_294_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond8_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_340_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_cond6_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_fu_344_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_366_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_103_cast_fu_358_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ult_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev9_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_104_cast_fu_362_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_61_fu_390_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_63_fu_412_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev10_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_64_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond9_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ult1_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev11_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dir_g_cast_fu_386_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal dir_g_3_cast_fu_459_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_cond7_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dir_g_1_fu_404_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp1_fu_473_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp7_demorgan_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_275_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_54_fu_279_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal dir_g_2_fu_525_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal dir_g_6_fu_532_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_195_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_3_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gd_data_stream_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                t_V_3_reg_184 <= j_V_reg_567;
            elsif (((exitcond8_fu_195_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_3_reg_184 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    t_V_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((exitcond_fu_206_p2 = ap_const_lv1_0) and (gy_data_stream_V_empty_n = ap_const_logic_0)) or ((exitcond_fu_206_p2 = ap_const_lv1_0) and (gx_data_stream_V_empty_n = ap_const_logic_0)))) and (exitcond_fu_206_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                t_V_reg_173 <= i_V_reg_559;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_173 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                abs_g1_reg_627 <= abs_g1_fu_519_p2;
                sel_tmp4_reg_617 <= sel_tmp4_fu_493_p3;
                sel_tmp8_reg_622 <= sel_tmp8_fu_513_p2;
                tmp_62_reg_612 <= tmp_62_fu_398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_559 <= i_V_fu_200_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((exitcond_fu_206_p2 = ap_const_lv1_0) and (gy_data_stream_V_empty_n = ap_const_logic_0)) or ((exitcond_fu_206_p2 = ap_const_lv1_0) and (gx_data_stream_V_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                j_V_reg_567 <= j_V_fu_211_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((exitcond_fu_206_p2 = ap_const_lv1_0) and (gy_data_stream_V_empty_n = ap_const_logic_0)) or ((exitcond_fu_206_p2 = ap_const_lv1_0) and (gx_data_stream_V_empty_n = ap_const_logic_0)))) and (exitcond_fu_206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                p_Result_2_reg_606 <= gy_data_stream_V_dout(15 downto 15);
                p_Result_s_reg_595 <= gx_data_stream_V_dout(15 downto 15);
                tmp_67_reg_572 <= gx_data_stream_V_dout;
                tmp_68_reg_581 <= gy_data_stream_V_dout;
                xs_V_3_reg_590 <= xs_V_3_fu_217_p2;
                xs_V_4_reg_601 <= xs_V_4_fu_231_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, gx_data_stream_V_empty_n, gy_data_stream_V_empty_n, gd_data_stream_V_full_n, ap_CS_fsm_state3, exitcond_fu_206_p2, ap_CS_fsm_state5, ap_CS_fsm_state2, exitcond8_fu_195_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_195_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not((((exitcond_fu_206_p2 = ap_const_lv1_0) and (gy_data_stream_V_empty_n = ap_const_logic_0)) or ((exitcond_fu_206_p2 = ap_const_lv1_0) and (gx_data_stream_V_empty_n = ap_const_logic_0)))) and (exitcond_fu_206_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not((((exitcond_fu_206_p2 = ap_const_lv1_0) and (gy_data_stream_V_empty_n = ap_const_logic_0)) or ((exitcond_fu_206_p2 = ap_const_lv1_0) and (gx_data_stream_V_empty_n = ap_const_logic_0)))) and (exitcond_fu_206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((gd_data_stream_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    abs_g1_fu_519_p2 <= std_logic_vector(unsigned(tmp_fu_275_p1) + unsigned(tmp_54_fu_279_p1));
    abs_gx_fu_254_p3 <= 
        p_Result_3_fu_245_p4 when (p_Result_s_reg_595(0) = '1') else 
        tmp_67_reg_572;
    abs_gy_fu_269_p3 <= 
        p_Result_4_fu_260_p4 when (p_Result_2_reg_606(0) = '1') else 
        tmp_68_reg_581;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_assign_proc : process(gx_data_stream_V_empty_n, gy_data_stream_V_empty_n, exitcond_fu_206_p2)
    begin
                ap_block_state3 <= (((exitcond_fu_206_p2 = ap_const_lv1_0) and (gy_data_stream_V_empty_n = ap_const_logic_0)) or ((exitcond_fu_206_p2 = ap_const_lv1_0) and (gx_data_stream_V_empty_n = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, exitcond8_fu_195_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_195_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    dir_g_1_fu_404_p3 <= 
        ap_const_lv2_2 when (tmp_62_fu_398_p2(0) = '1') else 
        ap_const_lv2_1;
    dir_g_2_fu_525_p3 <= 
        ap_const_lv2_2 when (tmp_62_reg_612(0) = '1') else 
        ap_const_lv2_3;
    dir_g_3_cast_fu_459_p3 <= 
        ap_const_lv2_3 when (rev11_fu_453_p2(0) = '1') else 
        ap_const_lv2_0;
    dir_g_6_fu_532_p3 <= 
        dir_g_2_fu_525_p3 when (sel_tmp8_reg_622(0) = '1') else 
        sel_tmp4_reg_617;
    dir_g_cast_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rev9_fu_380_p2),2));
    exitcond8_fu_195_p2 <= "1" when (t_V_reg_173 = gx_rows_V) else "0";
    exitcond_fu_206_p2 <= "1" when (t_V_3_reg_184 = gx_cols_V) else "0";

    gd_data_stream_V_blk_n_assign_proc : process(gd_data_stream_V_full_n, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            gd_data_stream_V_blk_n <= gd_data_stream_V_full_n;
        else 
            gd_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    gd_data_stream_V_din <= (abs_g1_reg_627 & dir_g_6_fu_532_p3);

    gd_data_stream_V_write_assign_proc : process(gd_data_stream_V_full_n, ap_CS_fsm_state5)
    begin
        if (((gd_data_stream_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            gd_data_stream_V_write <= ap_const_logic_1;
        else 
            gd_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;


    gx_data_stream_V_blk_n_assign_proc : process(gx_data_stream_V_empty_n, ap_CS_fsm_state3, exitcond_fu_206_p2)
    begin
        if (((exitcond_fu_206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gx_data_stream_V_blk_n <= gx_data_stream_V_empty_n;
        else 
            gx_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    gx_data_stream_V_read_assign_proc : process(gx_data_stream_V_empty_n, gy_data_stream_V_empty_n, ap_CS_fsm_state3, exitcond_fu_206_p2)
    begin
        if ((not((((exitcond_fu_206_p2 = ap_const_lv1_0) and (gy_data_stream_V_empty_n = ap_const_logic_0)) or ((exitcond_fu_206_p2 = ap_const_lv1_0) and (gx_data_stream_V_empty_n = ap_const_logic_0)))) and (exitcond_fu_206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gx_data_stream_V_read <= ap_const_logic_1;
        else 
            gx_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;


    gy_data_stream_V_blk_n_assign_proc : process(gy_data_stream_V_empty_n, ap_CS_fsm_state3, exitcond_fu_206_p2)
    begin
        if (((exitcond_fu_206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gy_data_stream_V_blk_n <= gy_data_stream_V_empty_n;
        else 
            gy_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    gy_data_stream_V_read_assign_proc : process(gx_data_stream_V_empty_n, gy_data_stream_V_empty_n, ap_CS_fsm_state3, exitcond_fu_206_p2)
    begin
        if ((not((((exitcond_fu_206_p2 = ap_const_lv1_0) and (gy_data_stream_V_empty_n = ap_const_logic_0)) or ((exitcond_fu_206_p2 = ap_const_lv1_0) and (gx_data_stream_V_empty_n = ap_const_logic_0)))) and (exitcond_fu_206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gy_data_stream_V_read <= ap_const_logic_1;
        else 
            gy_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    i_V_fu_200_p2 <= std_logic_vector(unsigned(t_V_reg_173) + unsigned(ap_const_lv32_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond8_fu_195_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond8_fu_195_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_V_fu_211_p2 <= std_logic_vector(unsigned(t_V_3_reg_184) + unsigned(ap_const_lv32_1));
    or_cond1_fu_435_p2 <= (tmp_64_fu_430_p2 and tmp_57_fu_329_p2);
    or_cond2_fu_441_p2 <= (or_cond9_fu_425_p2 or or_cond1_fu_435_p2);
    or_cond3_fu_323_p2 <= (or_cond_fu_307_p2 or or_cond8_fu_318_p2);
    or_cond6_fu_334_p2 <= (tmp_57_fu_329_p2 and tmp_53_fu_289_p2);
    or_cond7_fu_352_p2 <= (tmp_59_fu_344_p3 or or_cond6_fu_334_p2);
    or_cond8_fu_318_p2 <= (tmp_56_fu_313_p2 and p_Result_s_reg_595);
    or_cond9_fu_425_p2 <= (rev10_fu_419_p2 and p_Result_2_reg_606);
    or_cond_fu_307_p2 <= (tmp_53_fu_289_p2 and rev_fu_301_p2);
    
    p_Result_3_fu_245_p4_proc : process(xs_V_3_reg_590)
    begin
        p_Result_3_fu_245_p4 <= xs_V_3_reg_590;
        p_Result_3_fu_245_p4(15) <= ap_const_lv1_0(0);
    end process;

    
    p_Result_4_fu_260_p4_proc : process(xs_V_4_reg_601)
    begin
        p_Result_4_fu_260_p4 <= xs_V_4_reg_601;
        p_Result_4_fu_260_p4(15) <= ap_const_lv1_0(0);
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    rev10_fu_419_p2 <= (tmp_63_fu_412_p3 xor ap_const_lv1_1);
    rev11_fu_453_p2 <= (ult1_fu_447_p2 xor ap_const_lv1_1);
    rev9_fu_380_p2 <= (ult_fu_374_p2 xor ap_const_lv1_1);
    rev_fu_301_p2 <= (tmp_55_fu_294_p3 xor ap_const_lv1_1);
    sel_tmp1_fu_473_p3 <= 
        dir_g_cast_fu_386_p1 when (sel_tmp_fu_467_p2(0) = '1') else 
        dir_g_3_cast_fu_459_p3;
    sel_tmp2_fu_481_p2 <= (tmp_s_fu_283_p2 xor ap_const_lv1_1);
    sel_tmp3_fu_487_p2 <= (sel_tmp2_fu_481_p2 and or_cond7_fu_352_p2);
    sel_tmp4_fu_493_p3 <= 
        dir_g_1_fu_404_p3 when (sel_tmp3_fu_487_p2(0) = '1') else 
        sel_tmp1_fu_473_p3;
    sel_tmp7_demorgan_fu_501_p2 <= (tmp_s_fu_283_p2 or or_cond7_fu_352_p2);
    sel_tmp7_fu_507_p2 <= (sel_tmp7_demorgan_fu_501_p2 xor ap_const_lv1_1);
    sel_tmp8_fu_513_p2 <= (sel_tmp7_fu_507_p2 and or_cond2_fu_441_p2);
    sel_tmp_fu_467_p2 <= (tmp_s_fu_283_p2 and or_cond3_fu_323_p2);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_103_cast_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(abs_gx_fu_254_p3),17));
    tmp_104_cast_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(abs_gy_fu_269_p3),17));
    tmp_53_fu_289_p2 <= "1" when (signed(tmp_67_reg_572) > signed(ap_const_lv16_0)) else "0";
    tmp_54_fu_279_p1 <= abs_gx_fu_254_p3(14 - 1 downto 0);
    tmp_55_fu_294_p3 <= tmp_68_reg_581(15 downto 15);
    tmp_56_fu_313_p2 <= "1" when (signed(tmp_68_reg_581) < signed(ap_const_lv16_1)) else "0";
    tmp_57_fu_329_p2 <= "1" when (signed(tmp_68_reg_581) > signed(ap_const_lv16_0)) else "0";
    tmp_58_fu_340_p2 <= (tmp_68_reg_581 and tmp_67_reg_572);
    tmp_59_fu_344_p3 <= tmp_58_fu_340_p2(15 downto 15);
    tmp_60_fu_366_p3 <= (abs_gy_fu_269_p3 & ap_const_lv1_0);
    tmp_61_fu_390_p3 <= (abs_gx_fu_254_p3 & ap_const_lv1_0);
    tmp_62_fu_398_p2 <= "1" when (unsigned(tmp_104_cast_fu_362_p1) > unsigned(tmp_61_fu_390_p3)) else "0";
    tmp_63_fu_412_p3 <= tmp_67_reg_572(15 downto 15);
    tmp_64_fu_430_p2 <= "1" when (signed(tmp_67_reg_572) < signed(ap_const_lv16_1)) else "0";
    tmp_fu_275_p1 <= abs_gy_fu_269_p3(14 - 1 downto 0);
    tmp_s_fu_283_p2 <= "1" when (unsigned(abs_gx_fu_254_p3) > unsigned(abs_gy_fu_269_p3)) else "0";
    ult1_fu_447_p2 <= "1" when (unsigned(tmp_61_fu_390_p3) < unsigned(tmp_104_cast_fu_362_p1)) else "0";
    ult_fu_374_p2 <= "1" when (unsigned(tmp_60_fu_366_p3) < unsigned(tmp_103_cast_fu_358_p1)) else "0";
    xs_V_3_fu_217_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(gx_data_stream_V_dout));
    xs_V_4_fu_231_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(gy_data_stream_V_dout));
end behav;
