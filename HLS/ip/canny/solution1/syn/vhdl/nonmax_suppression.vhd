-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity nonmax_suppression is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    gd_rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
    gd_cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
    gd_data_stream_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    gd_data_stream_V_empty_n : IN STD_LOGIC;
    gd_data_stream_V_read : OUT STD_LOGIC;
    dst_data_stream_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    dst_data_stream_V_full_n : IN STD_LOGIC;
    dst_data_stream_V_write : OUT STD_LOGIC );
end;


architecture behav of nonmax_suppression is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv33_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_const_lv33_1FFFFFFFF : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal gd_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal or_cond3_reg_877 : STD_LOGIC_VECTOR (0 downto 0);
    signal dst_data_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal or_cond2_reg_897 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_reg_897_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_1_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_1_reg_255_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal ret_V_fu_271_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_1_fu_281_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_2_fu_287_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_3_fu_293_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_1_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_V_fu_308_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_V_reg_836 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_841 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_846 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_851 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_856 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_861 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_861_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_V_reg_865 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_s_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_870 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_870_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_reg_877_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal lbuffer_val_1_addr_reg_881 : STD_LOGIC_VECTOR (10 downto 0);
    signal lbuffer_val_1_addr_reg_881_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_892 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_892_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_892_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_reg_897_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal lbuffer_val_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp0_reg_901 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp1_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_906 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_pixel_val_fu_671_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_pixel_val_reg_911 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal lbuffer_val_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal lbuffer_val_0_ce0 : STD_LOGIC;
    signal lbuffer_val_0_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal lbuffer_val_0_ce1 : STD_LOGIC;
    signal lbuffer_val_0_we1 : STD_LOGIC;
    signal lbuffer_val_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal lbuffer_val_1_ce0 : STD_LOGIC;
    signal lbuffer_val_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal lbuffer_val_1_ce1 : STD_LOGIC;
    signal lbuffer_val_1_we1 : STD_LOGIC;
    signal t_V_reg_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_phi_mux_t_V_1_phi_fu_259_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp1_s_fu_136 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp0_s_fu_140 : STD_LOGIC_VECTOR (15 downto 0);
    signal element_gd_s_fu_144 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_0_1_fu_148 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_0_0_0_win_va_fu_458_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_0_1_1_fu_152 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_1_1_fu_156 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_1_0_0_win_va_fu_451_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_1_1_1_fu_160 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_2_1_fu_164 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_2_0_0_win_va_fu_444_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal win_val_2_1_1_fu_168 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_cast_fu_267_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal lhs_V_1_cast_fu_277_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_cast_fu_299_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_fu_314_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_6_cast_fu_346_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_21_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_479_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal current_dir_fu_465_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_13_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_545_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_24_fu_555_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_17_fu_535_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_25_fu_565_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sel_tmp2_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_525_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_26_fu_573_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_30_fu_609_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_31_fu_619_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_29_fu_599_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_32_fu_629_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_28_fu_589_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_33_fu_637_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal out_pixel_val_2_cast_fu_469_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_34_fu_645_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_27_fu_581_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_18_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond4_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_732_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component nonmax_suppression_lbuffer_val_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    lbuffer_val_0_U : component nonmax_suppression_lbuffer_val_0
    generic map (
        DataWidth => 16,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lbuffer_val_0_address0,
        ce0 => lbuffer_val_0_ce0,
        q0 => lbuffer_val_0_q0,
        address1 => lbuffer_val_0_address1,
        ce1 => lbuffer_val_0_ce1,
        we1 => lbuffer_val_0_we1,
        d1 => element_gd_s_fu_144);

    lbuffer_val_1_U : component nonmax_suppression_lbuffer_val_0
    generic map (
        DataWidth => 16,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => lbuffer_val_1_address0,
        ce0 => lbuffer_val_1_ce0,
        q0 => lbuffer_val_1_q0,
        address1 => lbuffer_val_1_addr_reg_881_pp0_iter1_reg,
        ce1 => lbuffer_val_1_ce1,
        we1 => lbuffer_val_1_we1,
        d1 => tmp0_reg_901);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((tmp_1_fu_303_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((tmp_1_fu_303_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((tmp_1_fu_303_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_1_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_7_reg_861 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                t_V_1_reg_255 <= j_V_reg_865;
            elsif (((tmp_1_fu_303_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_1_reg_255 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    t_V_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                t_V_reg_244 <= i_V_reg_836;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_244 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_cond3_reg_877 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                element_gd_s_fu_144 <= gd_data_stream_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_836 <= i_V_fu_308_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp1_reg_906 <= icmp1_fu_489_p2;
                or_cond2_reg_897_pp0_iter2_reg <= or_cond2_reg_897_pp0_iter1_reg;
                out_pixel_val_reg_911 <= out_pixel_val_fu_671_p3;
                tmp_11_reg_892_pp0_iter2_reg <= tmp_11_reg_892_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_303_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_reg_841 <= icmp_fu_324_p2;
                tmp_3_reg_846 <= tmp_3_fu_330_p2;
                tmp_6_reg_856 <= tmp_6_fu_341_p2;
                tmp_8_reg_851 <= tmp_8_fu_336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                j_V_reg_865 <= j_V_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_s_fu_361_p2 = ap_const_lv1_1) and (tmp_7_fu_350_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lbuffer_val_1_addr_reg_881 <= tmp_4_fu_371_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lbuffer_val_1_addr_reg_881_pp0_iter1_reg <= lbuffer_val_1_addr_reg_881;
                or_cond2_reg_897_pp0_iter1_reg <= or_cond2_reg_897;
                or_cond3_reg_877_pp0_iter1_reg <= or_cond3_reg_877;
                t_V_1_reg_255_pp0_iter1_reg <= t_V_1_reg_255;
                tmp_11_reg_892_pp0_iter1_reg <= tmp_11_reg_892;
                tmp_7_reg_861 <= tmp_7_fu_350_p2;
                tmp_7_reg_861_pp0_iter1_reg <= tmp_7_reg_861;
                tmp_s_reg_870_pp0_iter1_reg <= tmp_s_reg_870;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_7_fu_350_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                or_cond2_reg_897 <= or_cond2_fu_388_p2;
                or_cond3_reg_877 <= or_cond3_fu_366_p2;
                tmp_11_reg_892 <= tmp_11_fu_377_p2;
                tmp_s_reg_870 <= tmp_s_fu_361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_s_reg_870 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp0_reg_901 <= lbuffer_val_0_q0;
                tmp0_s_fu_140 <= lbuffer_val_0_q0;
                tmp1_s_fu_136 <= lbuffer_val_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_7_reg_861_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                win_val_0_1_1_fu_152 <= win_val_0_1_fu_148;
                win_val_0_1_fu_148 <= win_val_0_0_0_win_va_fu_458_p3;
                win_val_1_1_1_fu_160 <= win_val_1_1_fu_156;
                win_val_1_1_fu_156 <= win_val_1_0_0_win_va_fu_451_p3;
                win_val_2_1_1_fu_168 <= win_val_2_1_fu_164;
                win_val_2_1_fu_164 <= win_val_2_0_0_win_va_fu_444_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, tmp_1_fu_303_p2, ap_CS_fsm_state2, tmp_7_fu_350_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_1_fu_303_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((tmp_7_fu_350_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((tmp_7_fu_350_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(gd_data_stream_V_empty_n, dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, or_cond3_reg_877, ap_enable_reg_pp0_iter3, or_cond2_reg_897_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((or_cond2_reg_897_pp0_iter2_reg = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((or_cond3_reg_877 = ap_const_lv1_1) and (gd_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(gd_data_stream_V_empty_n, dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, or_cond3_reg_877, ap_enable_reg_pp0_iter3, or_cond2_reg_897_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((or_cond2_reg_897_pp0_iter2_reg = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((or_cond3_reg_877 = ap_const_lv1_1) and (gd_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(gd_data_stream_V_empty_n, dst_data_stream_V_full_n, ap_enable_reg_pp0_iter1, or_cond3_reg_877, ap_enable_reg_pp0_iter3, or_cond2_reg_897_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((or_cond2_reg_897_pp0_iter2_reg = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((or_cond3_reg_877 = ap_const_lv1_1) and (gd_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(gd_data_stream_V_empty_n, or_cond3_reg_877)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((or_cond3_reg_877 = ap_const_lv1_1) and (gd_data_stream_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter3_assign_proc : process(dst_data_stream_V_full_n, or_cond2_reg_897_pp0_iter2_reg)
    begin
                ap_block_state6_pp0_stage0_iter3 <= ((or_cond2_reg_897_pp0_iter2_reg = ap_const_lv1_0) and (dst_data_stream_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(tmp_7_fu_350_p2)
    begin
        if ((tmp_7_fu_350_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, tmp_1_fu_303_p2, ap_CS_fsm_state2)
    begin
        if (((tmp_1_fu_303_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_t_V_1_phi_fu_259_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, t_V_1_reg_255, tmp_7_reg_861, j_V_reg_865)
    begin
        if (((tmp_7_reg_861 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_t_V_1_phi_fu_259_p4 <= j_V_reg_865;
        else 
            ap_phi_mux_t_V_1_phi_fu_259_p4 <= t_V_1_reg_255;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    current_dir_fu_465_p1 <= win_val_1_1_fu_156(2 - 1 downto 0);

    dst_data_stream_V_blk_n_assign_proc : process(dst_data_stream_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, or_cond2_reg_897_pp0_iter2_reg)
    begin
        if (((or_cond2_reg_897_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            dst_data_stream_V_blk_n <= dst_data_stream_V_full_n;
        else 
            dst_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_data_stream_V_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_732_p3),16));

    dst_data_stream_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, or_cond2_reg_897_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_cond2_reg_897_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            dst_data_stream_V_write <= ap_const_logic_1;
        else 
            dst_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;


    gd_data_stream_V_blk_n_assign_proc : process(gd_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, or_cond3_reg_877)
    begin
        if (((or_cond3_reg_877 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gd_data_stream_V_blk_n <= gd_data_stream_V_empty_n;
        else 
            gd_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    gd_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_cond3_reg_877, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_cond3_reg_877 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gd_data_stream_V_read <= ap_const_logic_1;
        else 
            gd_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    i_V_fu_308_p2 <= std_logic_vector(unsigned(t_V_reg_244) + unsigned(ap_const_lv32_1));
    icmp1_fu_489_p2 <= "1" when (tmp_12_fu_479_p4 = ap_const_lv31_0) else "0";
    icmp_fu_324_p2 <= "1" when (tmp_fu_314_p4 = ap_const_lv31_0) else "0";

    internal_ap_ready_assign_proc : process(tmp_1_fu_303_p2, ap_CS_fsm_state2)
    begin
        if (((tmp_1_fu_303_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_V_fu_355_p2 <= std_logic_vector(unsigned(ap_phi_mux_t_V_1_phi_fu_259_p4) + unsigned(ap_const_lv32_1));
    lbuffer_val_0_address0 <= tmp_4_fu_371_p1(11 - 1 downto 0);
    lbuffer_val_0_address1 <= tmp_10_fu_412_p1(11 - 1 downto 0);

    lbuffer_val_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            lbuffer_val_0_ce0 <= ap_const_logic_1;
        else 
            lbuffer_val_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lbuffer_val_0_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lbuffer_val_0_ce1 <= ap_const_logic_1;
        else 
            lbuffer_val_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lbuffer_val_0_we1_assign_proc : process(ap_block_pp0_stage0_11001, or_cond3_reg_877_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_cond3_reg_877_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lbuffer_val_0_we1 <= ap_const_logic_1;
        else 
            lbuffer_val_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    lbuffer_val_1_address0 <= tmp_4_fu_371_p1(11 - 1 downto 0);

    lbuffer_val_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            lbuffer_val_1_ce0 <= ap_const_logic_1;
        else 
            lbuffer_val_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lbuffer_val_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lbuffer_val_1_ce1 <= ap_const_logic_1;
        else 
            lbuffer_val_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lbuffer_val_1_we1_assign_proc : process(ap_block_pp0_stage0_11001, tmp_s_reg_870_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_s_reg_870_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lbuffer_val_1_we1 <= ap_const_logic_1;
        else 
            lbuffer_val_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    lhs_V_1_cast_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gd_cols_V),33));
    lhs_V_cast_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gd_rows_V),33));
    or_cond1_fu_665_p2 <= (tmp_19_fu_659_p2 and tmp_18_fu_653_p2);
    or_cond2_fu_388_p2 <= (tmp_3_reg_846 or tmp_21_fu_382_p2);
    or_cond3_fu_366_p2 <= (tmp_s_fu_361_p2 and tmp_8_reg_851);
    or_cond4_fu_726_p2 <= (tmp9_fu_718_p2 or tmp2_fu_722_p2);
    out_pixel_val_2_cast_fu_469_p4 <= win_val_1_1_fu_156(15 downto 2);
    out_pixel_val_fu_671_p3 <= 
        out_pixel_val_2_cast_fu_469_p4 when (or_cond1_fu_665_p2(0) = '1') else 
        ap_const_lv14_0;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    ret_V_1_fu_281_p2 <= std_logic_vector(unsigned(lhs_V_1_cast_fu_277_p1) + unsigned(ap_const_lv33_1));
    ret_V_2_fu_287_p2 <= std_logic_vector(unsigned(lhs_V_cast_fu_267_p1) + unsigned(ap_const_lv33_1FFFFFFFF));
    ret_V_3_fu_293_p2 <= std_logic_vector(unsigned(lhs_V_1_cast_fu_277_p1) + unsigned(ap_const_lv33_1FFFFFFFF));
    ret_V_fu_271_p2 <= std_logic_vector(unsigned(lhs_V_cast_fu_267_p1) + unsigned(ap_const_lv33_1));
    sel_tmp1_fu_513_p2 <= (tmp_13_fu_495_p2 xor ap_const_lv1_1);
    sel_tmp2_fu_519_p2 <= (tmp_14_fu_501_p2 and sel_tmp1_fu_513_p2);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp2_fu_722_p2 <= (tmp_6_reg_856 or tmp_11_reg_892_pp0_iter2_reg);
    tmp9_fu_718_p2 <= (icmp_reg_841 or icmp1_reg_906);
    tmp_10_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_1_reg_255_pp0_iter1_reg),64));
    tmp_11_fu_377_p2 <= "1" when (signed(tmp_6_cast_fu_346_p1) > signed(ret_V_3_fu_293_p2)) else "0";
    tmp_12_fu_479_p4 <= t_V_1_reg_255_pp0_iter1_reg(31 downto 1);
    tmp_13_fu_495_p2 <= "1" when (current_dir_fu_465_p1 = ap_const_lv2_0) else "0";
    tmp_14_fu_501_p2 <= "1" when (current_dir_fu_465_p1 = ap_const_lv2_3) else "0";
    tmp_15_fu_507_p2 <= "1" when (current_dir_fu_465_p1 = ap_const_lv2_2) else "0";
    tmp_16_fu_525_p4 <= win_val_0_1_1_fu_152(15 downto 2);
    tmp_17_fu_535_p4 <= win_val_1_1_1_fu_160(15 downto 2);
    tmp_18_fu_653_p2 <= "1" when (unsigned(out_pixel_val_2_cast_fu_469_p4) > unsigned(tmp_34_fu_645_p3)) else "0";
    tmp_19_fu_659_p2 <= "1" when (unsigned(out_pixel_val_2_cast_fu_469_p4) > unsigned(tmp_27_fu_581_p3)) else "0";
    tmp_1_fu_303_p2 <= "1" when (unsigned(tmp_cast_fu_299_p1) < unsigned(ret_V_fu_271_p2)) else "0";
    tmp_20_fu_732_p3 <= 
        ap_const_lv14_0 when (or_cond4_fu_726_p2(0) = '1') else 
        out_pixel_val_reg_911;
    tmp_21_fu_382_p2 <= "1" when (ap_phi_mux_t_V_1_phi_fu_259_p4 = ap_const_lv32_0) else "0";
    tmp_23_fu_545_p4 <= win_val_2_1_fu_164(15 downto 2);
    tmp_24_fu_555_p4 <= win_val_0_0_0_win_va_fu_458_p3(15 downto 2);
    tmp_25_fu_565_p3 <= 
        tmp_23_fu_545_p4 when (tmp_15_fu_507_p2(0) = '1') else 
        tmp_24_fu_555_p4;
    tmp_26_fu_573_p3 <= 
        tmp_17_fu_535_p4 when (tmp_13_fu_495_p2(0) = '1') else 
        tmp_25_fu_565_p3;
    tmp_27_fu_581_p3 <= 
        tmp_16_fu_525_p4 when (sel_tmp2_fu_519_p2(0) = '1') else 
        tmp_26_fu_573_p3;
    tmp_28_fu_589_p4 <= win_val_2_0_0_win_va_fu_444_p3(15 downto 2);
    tmp_29_fu_599_p4 <= win_val_1_0_0_win_va_fu_451_p3(15 downto 2);
    tmp_30_fu_609_p4 <= win_val_0_1_fu_148(15 downto 2);
    tmp_31_fu_619_p4 <= win_val_2_1_1_fu_168(15 downto 2);
    tmp_32_fu_629_p3 <= 
        tmp_30_fu_609_p4 when (tmp_15_fu_507_p2(0) = '1') else 
        tmp_31_fu_619_p4;
    tmp_33_fu_637_p3 <= 
        tmp_29_fu_599_p4 when (tmp_13_fu_495_p2(0) = '1') else 
        tmp_32_fu_629_p3;
    tmp_34_fu_645_p3 <= 
        tmp_28_fu_589_p4 when (sel_tmp2_fu_519_p2(0) = '1') else 
        tmp_33_fu_637_p3;
    tmp_3_fu_330_p2 <= "1" when (t_V_reg_244 = ap_const_lv32_0) else "0";
    tmp_4_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_t_V_1_phi_fu_259_p4),64));
    tmp_6_cast_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_t_V_1_phi_fu_259_p4),33));
    tmp_6_fu_341_p2 <= "1" when (signed(tmp_cast_fu_299_p1) > signed(ret_V_2_fu_287_p2)) else "0";
    tmp_7_fu_350_p2 <= "1" when (unsigned(tmp_6_cast_fu_346_p1) < unsigned(ret_V_1_fu_281_p2)) else "0";
    tmp_8_fu_336_p2 <= "1" when (unsigned(t_V_reg_244) < unsigned(gd_rows_V)) else "0";
    tmp_cast_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_244),33));
    tmp_fu_314_p4 <= t_V_reg_244(31 downto 1);
    tmp_s_fu_361_p2 <= "1" when (unsigned(ap_phi_mux_t_V_1_phi_fu_259_p4) < unsigned(gd_cols_V)) else "0";
    win_val_0_0_0_win_va_fu_458_p3 <= 
        element_gd_s_fu_144 when (tmp_s_reg_870_pp0_iter1_reg(0) = '1') else 
        win_val_0_1_fu_148;
    win_val_1_0_0_win_va_fu_451_p3 <= 
        tmp0_s_fu_140 when (tmp_s_reg_870_pp0_iter1_reg(0) = '1') else 
        win_val_1_1_fu_156;
    win_val_2_0_0_win_va_fu_444_p3 <= 
        tmp1_s_fu_136 when (tmp_s_reg_870_pp0_iter1_reg(0) = '1') else 
        win_val_2_1_fu_164;
end behav;
