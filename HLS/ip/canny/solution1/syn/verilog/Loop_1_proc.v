// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_1_proc (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        packets_cast_loc_dout,
        packets_cast_loc_empty_n,
        packets_cast_loc_read,
        in_stream_data_V_TDATA,
        in_stream_data_V_TVALID,
        in_stream_data_V_TREADY,
        src_bw_data_stream_0_V_din,
        src_bw_data_stream_0_V_full_n,
        src_bw_data_stream_0_V_write,
        packets_cast_loc_out_din,
        packets_cast_loc_out_full_n,
        packets_cast_loc_out_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [19:0] packets_cast_loc_dout;
input   packets_cast_loc_empty_n;
output   packets_cast_loc_read;
input  [31:0] in_stream_data_V_TDATA;
input   in_stream_data_V_TVALID;
output   in_stream_data_V_TREADY;
output  [7:0] src_bw_data_stream_0_V_din;
input   src_bw_data_stream_0_V_full_n;
output   src_bw_data_stream_0_V_write;
output  [19:0] packets_cast_loc_out_din;
input   packets_cast_loc_out_full_n;
output   packets_cast_loc_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg packets_cast_loc_read;
reg[7:0] src_bw_data_stream_0_V_din;
reg src_bw_data_stream_0_V_write;
reg packets_cast_loc_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [31:0] in_stream_data_V_0_data_out;
wire    in_stream_data_V_0_vld_in;
wire    in_stream_data_V_0_vld_out;
wire    in_stream_data_V_0_ack_in;
reg    in_stream_data_V_0_ack_out;
reg   [31:0] in_stream_data_V_0_payload_A;
reg   [31:0] in_stream_data_V_0_payload_B;
reg    in_stream_data_V_0_sel_rd;
reg    in_stream_data_V_0_sel_wr;
wire    in_stream_data_V_0_sel;
wire    in_stream_data_V_0_load_A;
wire    in_stream_data_V_0_load_B;
reg   [1:0] in_stream_data_V_0_state;
wire    in_stream_data_V_0_state_cmp_full;
reg    packets_cast_loc_blk_n;
reg    in_stream_data_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_i_i_fu_142_p2;
reg    src_bw_data_stream_0_V_blk_n;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg    packets_cast_loc_out_blk_n;
reg   [19:0] packets_cast_loc_rea_reg_188;
reg    ap_block_state1;
wire   [18:0] r_fu_147_p2;
reg   [18:0] r_reg_196;
reg    ap_block_state2;
reg   [7:0] tmp_72_reg_201;
reg   [7:0] tmp_73_reg_206;
reg   [7:0] tmp_74_reg_211;
reg   [18:0] p_0171_rec_i_i_reg_127;
wire   [7:0] tmp_fu_153_p1;
wire   [19:0] r_cast_i_i_fu_138_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 in_stream_data_V_0_sel_rd = 1'b0;
#0 in_stream_data_V_0_sel_wr = 1'b0;
#0 in_stream_data_V_0_state = 2'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~(((tmp_i_i_fu_142_p2 == 1'd1) & (src_bw_data_stream_0_V_full_n == 1'b0)) | ((tmp_i_i_fu_142_p2 == 1'd1) & (in_stream_data_V_0_vld_out == 1'b0))) & (tmp_i_i_fu_142_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_stream_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_stream_data_V_0_ack_out == 1'b1) & (in_stream_data_V_0_vld_out == 1'b1))) begin
            in_stream_data_V_0_sel_rd <= ~in_stream_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_stream_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_stream_data_V_0_ack_in == 1'b1) & (in_stream_data_V_0_vld_in == 1'b1))) begin
            in_stream_data_V_0_sel_wr <= ~in_stream_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_stream_data_V_0_state <= 2'd0;
    end else begin
        if ((((in_stream_data_V_0_state == 2'd2) & (in_stream_data_V_0_vld_in == 1'b0)) | ((in_stream_data_V_0_state == 2'd3) & (in_stream_data_V_0_vld_in == 1'b0) & (in_stream_data_V_0_ack_out == 1'b1)))) begin
            in_stream_data_V_0_state <= 2'd2;
        end else if ((((in_stream_data_V_0_state == 2'd1) & (in_stream_data_V_0_ack_out == 1'b0)) | ((in_stream_data_V_0_state == 2'd3) & (in_stream_data_V_0_ack_out == 1'b0) & (in_stream_data_V_0_vld_in == 1'b1)))) begin
            in_stream_data_V_0_state <= 2'd1;
        end else if (((~((in_stream_data_V_0_vld_in == 1'b0) & (in_stream_data_V_0_ack_out == 1'b1)) & ~((in_stream_data_V_0_ack_out == 1'b0) & (in_stream_data_V_0_vld_in == 1'b1)) & (in_stream_data_V_0_state == 2'd3)) | ((in_stream_data_V_0_state == 2'd1) & (in_stream_data_V_0_ack_out == 1'b1)) | ((in_stream_data_V_0_state == 2'd2) & (in_stream_data_V_0_vld_in == 1'b1)))) begin
            in_stream_data_V_0_state <= 2'd3;
        end else begin
            in_stream_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (src_bw_data_stream_0_V_full_n == 1'b1))) begin
        p_0171_rec_i_i_reg_127 <= r_reg_196;
    end else if ((~((packets_cast_loc_empty_n == 1'b0) | (packets_cast_loc_out_full_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0171_rec_i_i_reg_127 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_data_V_0_load_A == 1'b1)) begin
        in_stream_data_V_0_payload_A <= in_stream_data_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_stream_data_V_0_load_B == 1'b1)) begin
        in_stream_data_V_0_payload_B <= in_stream_data_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((packets_cast_loc_empty_n == 1'b0) | (packets_cast_loc_out_full_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        packets_cast_loc_rea_reg_188 <= packets_cast_loc_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((tmp_i_i_fu_142_p2 == 1'd1) & (src_bw_data_stream_0_V_full_n == 1'b0)) | ((tmp_i_i_fu_142_p2 == 1'd1) & (in_stream_data_V_0_vld_out == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
        r_reg_196 <= r_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((tmp_i_i_fu_142_p2 == 1'd1) & (src_bw_data_stream_0_V_full_n == 1'b0)) | ((tmp_i_i_fu_142_p2 == 1'd1) & (in_stream_data_V_0_vld_out == 1'b0))) & (tmp_i_i_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_72_reg_201 <= {{in_stream_data_V_0_data_out[15:8]}};
        tmp_73_reg_206 <= {{in_stream_data_V_0_data_out[23:16]}};
        tmp_74_reg_211 <= {{in_stream_data_V_0_data_out[31:24]}};
    end
end

always @ (*) begin
    if ((~(((tmp_i_i_fu_142_p2 == 1'd1) & (src_bw_data_stream_0_V_full_n == 1'b0)) | ((tmp_i_i_fu_142_p2 == 1'd1) & (in_stream_data_V_0_vld_out == 1'b0))) & (tmp_i_i_fu_142_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~(((tmp_i_i_fu_142_p2 == 1'd1) & (src_bw_data_stream_0_V_full_n == 1'b0)) | ((tmp_i_i_fu_142_p2 == 1'd1) & (in_stream_data_V_0_vld_out == 1'b0))) & (tmp_i_i_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        in_stream_data_V_0_ack_out = 1'b1;
    end else begin
        in_stream_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_stream_data_V_0_sel == 1'b1)) begin
        in_stream_data_V_0_data_out = in_stream_data_V_0_payload_B;
    end else begin
        in_stream_data_V_0_data_out = in_stream_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((tmp_i_i_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        in_stream_data_V_TDATA_blk_n = in_stream_data_V_0_state[1'd0];
    end else begin
        in_stream_data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((tmp_i_i_fu_142_p2 == 1'd1) & (src_bw_data_stream_0_V_full_n == 1'b0)) | ((tmp_i_i_fu_142_p2 == 1'd1) & (in_stream_data_V_0_vld_out == 1'b0))) & (tmp_i_i_fu_142_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        packets_cast_loc_blk_n = packets_cast_loc_empty_n;
    end else begin
        packets_cast_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        packets_cast_loc_out_blk_n = packets_cast_loc_out_full_n;
    end else begin
        packets_cast_loc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((packets_cast_loc_empty_n == 1'b0) | (packets_cast_loc_out_full_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        packets_cast_loc_out_write = 1'b1;
    end else begin
        packets_cast_loc_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((packets_cast_loc_empty_n == 1'b0) | (packets_cast_loc_out_full_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        packets_cast_loc_read = 1'b1;
    end else begin
        packets_cast_loc_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((tmp_i_i_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        src_bw_data_stream_0_V_blk_n = src_bw_data_stream_0_V_full_n;
    end else begin
        src_bw_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (src_bw_data_stream_0_V_full_n == 1'b1))) begin
        src_bw_data_stream_0_V_din = tmp_74_reg_211;
    end else if (((1'b1 == ap_CS_fsm_state4) & (src_bw_data_stream_0_V_full_n == 1'b1))) begin
        src_bw_data_stream_0_V_din = tmp_73_reg_206;
    end else if (((1'b1 == ap_CS_fsm_state3) & (src_bw_data_stream_0_V_full_n == 1'b1))) begin
        src_bw_data_stream_0_V_din = tmp_72_reg_201;
    end else if ((~(((tmp_i_i_fu_142_p2 == 1'd1) & (src_bw_data_stream_0_V_full_n == 1'b0)) | ((tmp_i_i_fu_142_p2 == 1'd1) & (in_stream_data_V_0_vld_out == 1'b0))) & (tmp_i_i_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        src_bw_data_stream_0_V_din = tmp_fu_153_p1;
    end else begin
        src_bw_data_stream_0_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (src_bw_data_stream_0_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (src_bw_data_stream_0_V_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state3) & (src_bw_data_stream_0_V_full_n == 1'b1)) | (~(((tmp_i_i_fu_142_p2 == 1'd1) & (src_bw_data_stream_0_V_full_n == 1'b0)) | ((tmp_i_i_fu_142_p2 == 1'd1) & (in_stream_data_V_0_vld_out == 1'b0))) & (tmp_i_i_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        src_bw_data_stream_0_V_write = 1'b1;
    end else begin
        src_bw_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((packets_cast_loc_empty_n == 1'b0) | (packets_cast_loc_out_full_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~(((tmp_i_i_fu_142_p2 == 1'd1) & (src_bw_data_stream_0_V_full_n == 1'b0)) | ((tmp_i_i_fu_142_p2 == 1'd1) & (in_stream_data_V_0_vld_out == 1'b0))) & (tmp_i_i_fu_142_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~(((tmp_i_i_fu_142_p2 == 1'd1) & (src_bw_data_stream_0_V_full_n == 1'b0)) | ((tmp_i_i_fu_142_p2 == 1'd1) & (in_stream_data_V_0_vld_out == 1'b0))) & (tmp_i_i_fu_142_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (src_bw_data_stream_0_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (src_bw_data_stream_0_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (src_bw_data_stream_0_V_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((packets_cast_loc_empty_n == 1'b0) | (packets_cast_loc_out_full_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = (((tmp_i_i_fu_142_p2 == 1'd1) & (src_bw_data_stream_0_V_full_n == 1'b0)) | ((tmp_i_i_fu_142_p2 == 1'd1) & (in_stream_data_V_0_vld_out == 1'b0)));
end

assign ap_ready = internal_ap_ready;

assign in_stream_data_V_0_ack_in = in_stream_data_V_0_state[1'd1];

assign in_stream_data_V_0_load_A = (in_stream_data_V_0_state_cmp_full & ~in_stream_data_V_0_sel_wr);

assign in_stream_data_V_0_load_B = (in_stream_data_V_0_state_cmp_full & in_stream_data_V_0_sel_wr);

assign in_stream_data_V_0_sel = in_stream_data_V_0_sel_rd;

assign in_stream_data_V_0_state_cmp_full = ((in_stream_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_stream_data_V_0_vld_in = in_stream_data_V_TVALID;

assign in_stream_data_V_0_vld_out = in_stream_data_V_0_state[1'd0];

assign in_stream_data_V_TREADY = in_stream_data_V_0_state[1'd1];

assign packets_cast_loc_out_din = packets_cast_loc_dout;

assign r_cast_i_i_fu_138_p1 = p_0171_rec_i_i_reg_127;

assign r_fu_147_p2 = (p_0171_rec_i_i_reg_127 + 19'd1);

assign start_out = real_start;

assign tmp_fu_153_p1 = in_stream_data_V_0_data_out[7:0];

assign tmp_i_i_fu_142_p2 = (($signed(r_cast_i_i_fu_138_p1) < $signed(packets_cast_loc_rea_reg_188)) ? 1'b1 : 1'b0);

endmodule //Loop_1_proc
