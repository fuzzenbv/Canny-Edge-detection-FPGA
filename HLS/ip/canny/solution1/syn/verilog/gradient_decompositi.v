// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gradient_decompositi (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        gx_rows_V,
        gx_cols_V,
        gx_data_stream_V_dout,
        gx_data_stream_V_empty_n,
        gx_data_stream_V_read,
        gy_data_stream_V_dout,
        gy_data_stream_V_empty_n,
        gy_data_stream_V_read,
        gd_data_stream_V_din,
        gd_data_stream_V_full_n,
        gd_data_stream_V_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] gx_rows_V;
input  [31:0] gx_cols_V;
input  [15:0] gx_data_stream_V_dout;
input   gx_data_stream_V_empty_n;
output   gx_data_stream_V_read;
input  [15:0] gy_data_stream_V_dout;
input   gy_data_stream_V_empty_n;
output   gy_data_stream_V_read;
output  [15:0] gd_data_stream_V_din;
input   gd_data_stream_V_full_n;
output   gd_data_stream_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg gx_data_stream_V_read;
reg gy_data_stream_V_read;
reg gd_data_stream_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    gx_data_stream_V_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_206_p2;
reg    gy_data_stream_V_blk_n;
reg    gd_data_stream_V_blk_n;
wire    ap_CS_fsm_state5;
reg    ap_block_state1;
wire   [31:0] i_V_fu_200_p2;
reg   [31:0] i_V_reg_559;
wire    ap_CS_fsm_state2;
wire   [31:0] j_V_fu_211_p2;
reg   [31:0] j_V_reg_567;
reg    ap_block_state3;
reg   [15:0] tmp_67_reg_572;
reg   [15:0] tmp_68_reg_581;
wire   [15:0] xs_V_3_fu_217_p2;
reg   [15:0] xs_V_3_reg_590;
reg   [0:0] p_Result_s_reg_595;
wire   [15:0] xs_V_4_fu_231_p2;
reg   [15:0] xs_V_4_reg_601;
reg   [0:0] p_Result_2_reg_606;
wire   [0:0] tmp_62_fu_398_p2;
reg   [0:0] tmp_62_reg_612;
wire    ap_CS_fsm_state4;
wire   [1:0] sel_tmp4_fu_493_p3;
reg   [1:0] sel_tmp4_reg_617;
wire   [0:0] sel_tmp8_fu_513_p2;
reg   [0:0] sel_tmp8_reg_622;
wire   [13:0] abs_g1_fu_519_p2;
reg   [13:0] abs_g1_reg_627;
reg   [31:0] t_V_reg_173;
reg   [31:0] t_V_3_reg_184;
wire   [0:0] exitcond8_fu_195_p2;
reg   [15:0] p_Result_3_fu_245_p4;
reg   [15:0] p_Result_4_fu_260_p4;
wire   [15:0] abs_gy_fu_269_p3;
wire   [15:0] abs_gx_fu_254_p3;
wire   [0:0] tmp_55_fu_294_p3;
wire   [0:0] tmp_53_fu_289_p2;
wire   [0:0] rev_fu_301_p2;
wire   [0:0] tmp_56_fu_313_p2;
wire   [0:0] or_cond_fu_307_p2;
wire   [0:0] or_cond8_fu_318_p2;
wire   [0:0] tmp_57_fu_329_p2;
wire   [15:0] tmp_58_fu_340_p2;
wire   [0:0] or_cond6_fu_334_p2;
wire   [0:0] tmp_59_fu_344_p3;
wire   [16:0] tmp_60_fu_366_p3;
wire   [16:0] tmp_103_cast_fu_358_p1;
wire   [0:0] ult_fu_374_p2;
wire   [0:0] rev9_fu_380_p2;
wire   [16:0] tmp_104_cast_fu_362_p1;
wire   [16:0] tmp_61_fu_390_p3;
wire   [0:0] tmp_63_fu_412_p3;
wire   [0:0] rev10_fu_419_p2;
wire   [0:0] tmp_64_fu_430_p2;
wire   [0:0] or_cond9_fu_425_p2;
wire   [0:0] or_cond1_fu_435_p2;
wire   [0:0] ult1_fu_447_p2;
wire   [0:0] rev11_fu_453_p2;
wire   [0:0] tmp_s_fu_283_p2;
wire   [0:0] or_cond3_fu_323_p2;
wire   [0:0] sel_tmp_fu_467_p2;
wire   [1:0] dir_g_cast_fu_386_p1;
wire   [1:0] dir_g_3_cast_fu_459_p3;
wire   [0:0] or_cond7_fu_352_p2;
wire   [0:0] sel_tmp2_fu_481_p2;
wire   [0:0] sel_tmp3_fu_487_p2;
wire   [1:0] dir_g_1_fu_404_p3;
wire   [1:0] sel_tmp1_fu_473_p3;
wire   [0:0] sel_tmp7_demorgan_fu_501_p2;
wire   [0:0] or_cond2_fu_441_p2;
wire   [0:0] sel_tmp7_fu_507_p2;
wire   [13:0] tmp_fu_275_p1;
wire   [13:0] tmp_54_fu_279_p1;
wire   [1:0] dir_g_2_fu_525_p3;
wire   [1:0] dir_g_6_fu_532_p3;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_195_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((gd_data_stream_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        t_V_3_reg_184 <= j_V_reg_567;
    end else if (((exitcond8_fu_195_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_3_reg_184 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((exitcond_fu_206_p2 == 1'd0) & (gy_data_stream_V_empty_n == 1'b0)) | ((exitcond_fu_206_p2 == 1'd0) & (gx_data_stream_V_empty_n == 1'b0))) & (exitcond_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        t_V_reg_173 <= i_V_reg_559;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_173 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        abs_g1_reg_627 <= abs_g1_fu_519_p2;
        sel_tmp4_reg_617 <= sel_tmp4_fu_493_p3;
        sel_tmp8_reg_622 <= sel_tmp8_fu_513_p2;
        tmp_62_reg_612 <= tmp_62_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_559 <= i_V_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((exitcond_fu_206_p2 == 1'd0) & (gy_data_stream_V_empty_n == 1'b0)) | ((exitcond_fu_206_p2 == 1'd0) & (gx_data_stream_V_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state3))) begin
        j_V_reg_567 <= j_V_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((exitcond_fu_206_p2 == 1'd0) & (gy_data_stream_V_empty_n == 1'b0)) | ((exitcond_fu_206_p2 == 1'd0) & (gx_data_stream_V_empty_n == 1'b0))) & (exitcond_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_Result_2_reg_606 <= gy_data_stream_V_dout[32'd15];
        p_Result_s_reg_595 <= gx_data_stream_V_dout[32'd15];
        tmp_67_reg_572 <= gx_data_stream_V_dout;
        tmp_68_reg_581 <= gy_data_stream_V_dout;
        xs_V_3_reg_590 <= xs_V_3_fu_217_p2;
        xs_V_4_reg_601 <= xs_V_4_fu_231_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_195_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        gd_data_stream_V_blk_n = gd_data_stream_V_full_n;
    end else begin
        gd_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((gd_data_stream_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        gd_data_stream_V_write = 1'b1;
    end else begin
        gd_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        gx_data_stream_V_blk_n = gx_data_stream_V_empty_n;
    end else begin
        gx_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_206_p2 == 1'd0) & (gy_data_stream_V_empty_n == 1'b0)) | ((exitcond_fu_206_p2 == 1'd0) & (gx_data_stream_V_empty_n == 1'b0))) & (exitcond_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        gx_data_stream_V_read = 1'b1;
    end else begin
        gx_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        gy_data_stream_V_blk_n = gy_data_stream_V_empty_n;
    end else begin
        gy_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((exitcond_fu_206_p2 == 1'd0) & (gy_data_stream_V_empty_n == 1'b0)) | ((exitcond_fu_206_p2 == 1'd0) & (gx_data_stream_V_empty_n == 1'b0))) & (exitcond_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        gy_data_stream_V_read = 1'b1;
    end else begin
        gy_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_195_p2 == 1'd1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond8_fu_195_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~(((exitcond_fu_206_p2 == 1'd0) & (gy_data_stream_V_empty_n == 1'b0)) | ((exitcond_fu_206_p2 == 1'd0) & (gx_data_stream_V_empty_n == 1'b0))) & (exitcond_fu_206_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~(((exitcond_fu_206_p2 == 1'd0) & (gy_data_stream_V_empty_n == 1'b0)) | ((exitcond_fu_206_p2 == 1'd0) & (gx_data_stream_V_empty_n == 1'b0))) & (exitcond_fu_206_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((gd_data_stream_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs_g1_fu_519_p2 = (tmp_fu_275_p1 + tmp_54_fu_279_p1);

assign abs_gx_fu_254_p3 = ((p_Result_s_reg_595[0:0] === 1'b1) ? p_Result_3_fu_245_p4 : tmp_67_reg_572);

assign abs_gy_fu_269_p3 = ((p_Result_2_reg_606[0:0] === 1'b1) ? p_Result_4_fu_260_p4 : tmp_68_reg_581);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3 = (((exitcond_fu_206_p2 == 1'd0) & (gy_data_stream_V_empty_n == 1'b0)) | ((exitcond_fu_206_p2 == 1'd0) & (gx_data_stream_V_empty_n == 1'b0)));
end

assign ap_ready = internal_ap_ready;

assign dir_g_1_fu_404_p3 = ((tmp_62_fu_398_p2[0:0] === 1'b1) ? 2'd2 : 2'd1);

assign dir_g_2_fu_525_p3 = ((tmp_62_reg_612[0:0] === 1'b1) ? 2'd2 : 2'd3);

assign dir_g_3_cast_fu_459_p3 = ((rev11_fu_453_p2[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign dir_g_6_fu_532_p3 = ((sel_tmp8_reg_622[0:0] === 1'b1) ? dir_g_2_fu_525_p3 : sel_tmp4_reg_617);

assign dir_g_cast_fu_386_p1 = rev9_fu_380_p2;

assign exitcond8_fu_195_p2 = ((t_V_reg_173 == gx_rows_V) ? 1'b1 : 1'b0);

assign exitcond_fu_206_p2 = ((t_V_3_reg_184 == gx_cols_V) ? 1'b1 : 1'b0);

assign gd_data_stream_V_din = {{abs_g1_reg_627}, {dir_g_6_fu_532_p3}};

assign i_V_fu_200_p2 = (t_V_reg_173 + 32'd1);

assign j_V_fu_211_p2 = (t_V_3_reg_184 + 32'd1);

assign or_cond1_fu_435_p2 = (tmp_64_fu_430_p2 & tmp_57_fu_329_p2);

assign or_cond2_fu_441_p2 = (or_cond9_fu_425_p2 | or_cond1_fu_435_p2);

assign or_cond3_fu_323_p2 = (or_cond_fu_307_p2 | or_cond8_fu_318_p2);

assign or_cond6_fu_334_p2 = (tmp_57_fu_329_p2 & tmp_53_fu_289_p2);

assign or_cond7_fu_352_p2 = (tmp_59_fu_344_p3 | or_cond6_fu_334_p2);

assign or_cond8_fu_318_p2 = (tmp_56_fu_313_p2 & p_Result_s_reg_595);

assign or_cond9_fu_425_p2 = (rev10_fu_419_p2 & p_Result_2_reg_606);

assign or_cond_fu_307_p2 = (tmp_53_fu_289_p2 & rev_fu_301_p2);

always @ (*) begin
    p_Result_3_fu_245_p4 = xs_V_3_reg_590;
    p_Result_3_fu_245_p4[32'd15] = |(1'd0);
end

always @ (*) begin
    p_Result_4_fu_260_p4 = xs_V_4_reg_601;
    p_Result_4_fu_260_p4[32'd15] = |(1'd0);
end

assign rev10_fu_419_p2 = (tmp_63_fu_412_p3 ^ 1'd1);

assign rev11_fu_453_p2 = (ult1_fu_447_p2 ^ 1'd1);

assign rev9_fu_380_p2 = (ult_fu_374_p2 ^ 1'd1);

assign rev_fu_301_p2 = (tmp_55_fu_294_p3 ^ 1'd1);

assign sel_tmp1_fu_473_p3 = ((sel_tmp_fu_467_p2[0:0] === 1'b1) ? dir_g_cast_fu_386_p1 : dir_g_3_cast_fu_459_p3);

assign sel_tmp2_fu_481_p2 = (tmp_s_fu_283_p2 ^ 1'd1);

assign sel_tmp3_fu_487_p2 = (sel_tmp2_fu_481_p2 & or_cond7_fu_352_p2);

assign sel_tmp4_fu_493_p3 = ((sel_tmp3_fu_487_p2[0:0] === 1'b1) ? dir_g_1_fu_404_p3 : sel_tmp1_fu_473_p3);

assign sel_tmp7_demorgan_fu_501_p2 = (tmp_s_fu_283_p2 | or_cond7_fu_352_p2);

assign sel_tmp7_fu_507_p2 = (sel_tmp7_demorgan_fu_501_p2 ^ 1'd1);

assign sel_tmp8_fu_513_p2 = (sel_tmp7_fu_507_p2 & or_cond2_fu_441_p2);

assign sel_tmp_fu_467_p2 = (tmp_s_fu_283_p2 & or_cond3_fu_323_p2);

assign start_out = real_start;

assign tmp_103_cast_fu_358_p1 = abs_gx_fu_254_p3;

assign tmp_104_cast_fu_362_p1 = abs_gy_fu_269_p3;

assign tmp_53_fu_289_p2 = (($signed(tmp_67_reg_572) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign tmp_54_fu_279_p1 = abs_gx_fu_254_p3[13:0];

assign tmp_55_fu_294_p3 = tmp_68_reg_581[32'd15];

assign tmp_56_fu_313_p2 = (($signed(tmp_68_reg_581) < $signed(16'd1)) ? 1'b1 : 1'b0);

assign tmp_57_fu_329_p2 = (($signed(tmp_68_reg_581) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign tmp_58_fu_340_p2 = (tmp_68_reg_581 & tmp_67_reg_572);

assign tmp_59_fu_344_p3 = tmp_58_fu_340_p2[32'd15];

assign tmp_60_fu_366_p3 = {{abs_gy_fu_269_p3}, {1'd0}};

assign tmp_61_fu_390_p3 = {{abs_gx_fu_254_p3}, {1'd0}};

assign tmp_62_fu_398_p2 = ((tmp_104_cast_fu_362_p1 > tmp_61_fu_390_p3) ? 1'b1 : 1'b0);

assign tmp_63_fu_412_p3 = tmp_67_reg_572[32'd15];

assign tmp_64_fu_430_p2 = (($signed(tmp_67_reg_572) < $signed(16'd1)) ? 1'b1 : 1'b0);

assign tmp_fu_275_p1 = abs_gy_fu_269_p3[13:0];

assign tmp_s_fu_283_p2 = ((abs_gx_fu_254_p3 > abs_gy_fu_269_p3) ? 1'b1 : 1'b0);

assign ult1_fu_447_p2 = ((tmp_61_fu_390_p3 < tmp_104_cast_fu_362_p1) ? 1'b1 : 1'b0);

assign ult_fu_374_p2 = ((tmp_60_fu_366_p3 < tmp_103_cast_fu_358_p1) ? 1'b1 : 1'b0);

assign xs_V_3_fu_217_p2 = (16'd0 - gx_data_stream_V_dout);

assign xs_V_4_fu_231_p2 = (16'd0 - gy_data_stream_V_dout);

endmodule //gradient_decompositi
