// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Loop_2_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Loop_2_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Loop_2_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> Loop_2_proc::ap_ST_fsm_state1 = "1";
const sc_lv<6> Loop_2_proc::ap_ST_fsm_state2 = "10";
const sc_lv<6> Loop_2_proc::ap_ST_fsm_state3 = "100";
const sc_lv<6> Loop_2_proc::ap_ST_fsm_state4 = "1000";
const sc_lv<6> Loop_2_proc::ap_ST_fsm_state5 = "10000";
const sc_lv<6> Loop_2_proc::ap_ST_fsm_state6 = "100000";
const sc_lv<32> Loop_2_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> Loop_2_proc::ap_const_lv1_0 = "0";
const sc_lv<1> Loop_2_proc::ap_const_lv1_1 = "1";
const sc_lv<2> Loop_2_proc::ap_const_lv2_0 = "00";
const sc_lv<2> Loop_2_proc::ap_const_lv2_2 = "10";
const sc_lv<2> Loop_2_proc::ap_const_lv2_3 = "11";
const sc_lv<2> Loop_2_proc::ap_const_lv2_1 = "1";
const sc_lv<32> Loop_2_proc::ap_const_lv32_1 = "1";
const sc_lv<32> Loop_2_proc::ap_const_lv32_2 = "10";
const sc_lv<32> Loop_2_proc::ap_const_lv32_3 = "11";
const sc_lv<32> Loop_2_proc::ap_const_lv32_4 = "100";
const sc_lv<32> Loop_2_proc::ap_const_lv32_5 = "101";
const sc_lv<19> Loop_2_proc::ap_const_lv19_0 = "0000000000000000000";
const sc_lv<19> Loop_2_proc::ap_const_lv19_1 = "1";
const bool Loop_2_proc::ap_const_boolean_1 = true;

Loop_2_proc::Loop_2_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( packets_cast_loc_empty_n );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( canny_edges_data_stream_0_V_empty_n );
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( tmp_116_i_i_fu_110_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( canny_edges_data_stream_0_V_empty_n );
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_116_i_i_fu_110_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( canny_edges_data_stream_0_V_empty_n );
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_116_i_i_fu_110_p2 );

    SC_METHOD(thread_canny_edges_data_stream_0_V_blk_n);
    sensitive << ( canny_edges_data_stream_0_V_empty_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_116_i_i_fu_110_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_canny_edges_data_stream_0_V_read);
    sensitive << ( canny_edges_data_stream_0_V_empty_n );
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_116_i_i_fu_110_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_out_stream_data_V_1_ack_in);
    sensitive << ( out_stream_data_V_1_state );

    SC_METHOD(thread_out_stream_data_V_1_ack_out);
    sensitive << ( out_stream_data_V_TREADY );

    SC_METHOD(thread_out_stream_data_V_1_data_out);
    sensitive << ( out_stream_data_V_1_payload_A );
    sensitive << ( out_stream_data_V_1_payload_B );
    sensitive << ( out_stream_data_V_1_sel );

    SC_METHOD(thread_out_stream_data_V_1_load_A);
    sensitive << ( out_stream_data_V_1_sel_wr );
    sensitive << ( out_stream_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_data_V_1_load_B);
    sensitive << ( out_stream_data_V_1_sel_wr );
    sensitive << ( out_stream_data_V_1_state_cmp_full );

    SC_METHOD(thread_out_stream_data_V_1_sel);
    sensitive << ( out_stream_data_V_1_sel_rd );

    SC_METHOD(thread_out_stream_data_V_1_state_cmp_full);
    sensitive << ( out_stream_data_V_1_state );

    SC_METHOD(thread_out_stream_data_V_1_vld_in);
    sensitive << ( canny_edges_data_stream_0_V_empty_n );
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_out_stream_data_V_1_vld_out);
    sensitive << ( out_stream_data_V_1_state );

    SC_METHOD(thread_out_stream_data_V_TDATA);
    sensitive << ( out_stream_data_V_1_data_out );

    SC_METHOD(thread_out_stream_data_V_TDATA_blk_n);
    sensitive << ( out_stream_data_V_1_state );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_out_stream_data_V_TVALID);
    sensitive << ( out_stream_data_V_1_state );

    SC_METHOD(thread_p_Result_s_fu_121_p5);
    sensitive << ( canny_edges_data_stream_0_V_dout );
    sensitive << ( tmp_reg_144 );
    sensitive << ( tmp_69_reg_149 );
    sensitive << ( tmp_70_reg_154 );

    SC_METHOD(thread_packets_cast_loc_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( packets_cast_loc_empty_n );

    SC_METHOD(thread_packets_cast_loc_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( packets_cast_loc_empty_n );

    SC_METHOD(thread_r1_cast_i_i_fu_106_p1);
    sensitive << ( p_0169_rec_i_i_reg_95 );

    SC_METHOD(thread_r_fu_115_p2);
    sensitive << ( p_0169_rec_i_i_reg_95 );

    SC_METHOD(thread_tmp_116_i_i_fu_110_p2);
    sensitive << ( canny_edges_data_stream_0_V_empty_n );
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_116_i_i_fu_110_p2 );
    sensitive << ( packets_cast_loc_rea_reg_131 );
    sensitive << ( r1_cast_i_i_fu_106_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( packets_cast_loc_empty_n );
    sensitive << ( canny_edges_data_stream_0_V_empty_n );
    sensitive << ( out_stream_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_116_i_i_fu_110_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "000001";
    out_stream_data_V_1_sel_rd = SC_LOGIC_0;
    out_stream_data_V_1_sel_wr = SC_LOGIC_0;
    out_stream_data_V_1_state = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Loop_2_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, packets_cast_loc_dout, "(port)packets_cast_loc_dout");
    sc_trace(mVcdFile, packets_cast_loc_empty_n, "(port)packets_cast_loc_empty_n");
    sc_trace(mVcdFile, packets_cast_loc_read, "(port)packets_cast_loc_read");
    sc_trace(mVcdFile, canny_edges_data_stream_0_V_dout, "(port)canny_edges_data_stream_0_V_dout");
    sc_trace(mVcdFile, canny_edges_data_stream_0_V_empty_n, "(port)canny_edges_data_stream_0_V_empty_n");
    sc_trace(mVcdFile, canny_edges_data_stream_0_V_read, "(port)canny_edges_data_stream_0_V_read");
    sc_trace(mVcdFile, out_stream_data_V_TDATA, "(port)out_stream_data_V_TDATA");
    sc_trace(mVcdFile, out_stream_data_V_TVALID, "(port)out_stream_data_V_TVALID");
    sc_trace(mVcdFile, out_stream_data_V_TREADY, "(port)out_stream_data_V_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, out_stream_data_V_1_data_out, "out_stream_data_V_1_data_out");
    sc_trace(mVcdFile, out_stream_data_V_1_vld_in, "out_stream_data_V_1_vld_in");
    sc_trace(mVcdFile, out_stream_data_V_1_vld_out, "out_stream_data_V_1_vld_out");
    sc_trace(mVcdFile, out_stream_data_V_1_ack_in, "out_stream_data_V_1_ack_in");
    sc_trace(mVcdFile, out_stream_data_V_1_ack_out, "out_stream_data_V_1_ack_out");
    sc_trace(mVcdFile, out_stream_data_V_1_payload_A, "out_stream_data_V_1_payload_A");
    sc_trace(mVcdFile, out_stream_data_V_1_payload_B, "out_stream_data_V_1_payload_B");
    sc_trace(mVcdFile, out_stream_data_V_1_sel_rd, "out_stream_data_V_1_sel_rd");
    sc_trace(mVcdFile, out_stream_data_V_1_sel_wr, "out_stream_data_V_1_sel_wr");
    sc_trace(mVcdFile, out_stream_data_V_1_sel, "out_stream_data_V_1_sel");
    sc_trace(mVcdFile, out_stream_data_V_1_load_A, "out_stream_data_V_1_load_A");
    sc_trace(mVcdFile, out_stream_data_V_1_load_B, "out_stream_data_V_1_load_B");
    sc_trace(mVcdFile, out_stream_data_V_1_state, "out_stream_data_V_1_state");
    sc_trace(mVcdFile, out_stream_data_V_1_state_cmp_full, "out_stream_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, packets_cast_loc_blk_n, "packets_cast_loc_blk_n");
    sc_trace(mVcdFile, canny_edges_data_stream_0_V_blk_n, "canny_edges_data_stream_0_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_116_i_i_fu_110_p2, "tmp_116_i_i_fu_110_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, out_stream_data_V_TDATA_blk_n, "out_stream_data_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, packets_cast_loc_rea_reg_131, "packets_cast_loc_rea_reg_131");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, r_fu_115_p2, "r_fu_115_p2");
    sc_trace(mVcdFile, r_reg_139, "r_reg_139");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, tmp_reg_144, "tmp_reg_144");
    sc_trace(mVcdFile, tmp_69_reg_149, "tmp_69_reg_149");
    sc_trace(mVcdFile, tmp_70_reg_154, "tmp_70_reg_154");
    sc_trace(mVcdFile, p_Result_s_fu_121_p5, "p_Result_s_fu_121_p5");
    sc_trace(mVcdFile, p_0169_rec_i_i_reg_95, "p_0169_rec_i_i_reg_95");
    sc_trace(mVcdFile, r1_cast_i_i_fu_106_p1, "r1_cast_i_i_fu_106_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Loop_2_proc::~Loop_2_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Loop_2_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    !((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_116_i_i_fu_110_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, canny_edges_data_stream_0_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_in.read())) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, tmp_116_i_i_fu_110_p2.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_vld_out.read()))) {
            out_stream_data_V_1_sel_rd =  (sc_logic) (~out_stream_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_ack_in.read()))) {
            out_stream_data_V_1_sel_wr =  (sc_logic) (~out_stream_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        out_stream_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(out_stream_data_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(out_stream_data_V_1_state.read(), ap_const_lv2_2)))) {
            out_stream_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_stream_data_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_stream_data_V_1_state.read(), ap_const_lv2_1)))) {
            out_stream_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(out_stream_data_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(out_stream_data_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(out_stream_data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_ack_out.read()))))) {
            out_stream_data_V_1_state = ap_const_lv2_3;
        } else {
            out_stream_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_1))) {
        p_0169_rec_i_i_reg_95 = r_reg_139.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, packets_cast_loc_empty_n.read())))) {
        p_0169_rec_i_i_reg_95 = ap_const_lv19_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_load_A.read())) {
        out_stream_data_V_1_payload_A = p_Result_s_fu_121_p5.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_load_B.read())) {
        out_stream_data_V_1_payload_B = p_Result_s_fu_121_p5.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, packets_cast_loc_empty_n.read())))) {
        packets_cast_loc_rea_reg_131 = packets_cast_loc_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_116_i_i_fu_110_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, canny_edges_data_stream_0_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_in.read())))) {
        r_reg_139 = r_fu_115_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(canny_edges_data_stream_0_V_empty_n.read(), ap_const_logic_1))) {
        tmp_69_reg_149 = canny_edges_data_stream_0_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(canny_edges_data_stream_0_V_empty_n.read(), ap_const_logic_1))) {
        tmp_70_reg_154 = canny_edges_data_stream_0_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_116_i_i_fu_110_p2.read()) && !((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_116_i_i_fu_110_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, canny_edges_data_stream_0_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_in.read())))) {
        tmp_reg_144 = canny_edges_data_stream_0_V_dout.read();
    }
}

void Loop_2_proc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Loop_2_proc::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Loop_2_proc::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Loop_2_proc::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Loop_2_proc::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Loop_2_proc::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void Loop_2_proc::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, packets_cast_loc_empty_n.read()));
}

void Loop_2_proc::thread_ap_block_state2() {
    ap_block_state2 = ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_116_i_i_fu_110_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, canny_edges_data_stream_0_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_in.read()));
}

void Loop_2_proc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_116_i_i_fu_110_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, canny_edges_data_stream_0_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_in.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_116_i_i_fu_110_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Loop_2_proc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Loop_2_proc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_116_i_i_fu_110_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, canny_edges_data_stream_0_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_in.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_116_i_i_fu_110_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Loop_2_proc::thread_canny_edges_data_stream_0_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_116_i_i_fu_110_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        canny_edges_data_stream_0_V_blk_n = canny_edges_data_stream_0_V_empty_n.read();
    } else {
        canny_edges_data_stream_0_V_blk_n = ap_const_logic_1;
    }
}

void Loop_2_proc::thread_canny_edges_data_stream_0_V_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_116_i_i_fu_110_p2.read()) && 
          !((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_116_i_i_fu_110_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, canny_edges_data_stream_0_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_in.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(canny_edges_data_stream_0_V_empty_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(canny_edges_data_stream_0_V_empty_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, canny_edges_data_stream_0_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_in.read()))))) {
        canny_edges_data_stream_0_V_read = ap_const_logic_1;
    } else {
        canny_edges_data_stream_0_V_read = ap_const_logic_0;
    }
}

void Loop_2_proc::thread_out_stream_data_V_1_ack_in() {
    out_stream_data_V_1_ack_in = out_stream_data_V_1_state.read()[1];
}

void Loop_2_proc::thread_out_stream_data_V_1_ack_out() {
    out_stream_data_V_1_ack_out = out_stream_data_V_TREADY.read();
}

void Loop_2_proc::thread_out_stream_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_stream_data_V_1_sel.read())) {
        out_stream_data_V_1_data_out = out_stream_data_V_1_payload_B.read();
    } else {
        out_stream_data_V_1_data_out = out_stream_data_V_1_payload_A.read();
    }
}

void Loop_2_proc::thread_out_stream_data_V_1_load_A() {
    out_stream_data_V_1_load_A = (out_stream_data_V_1_state_cmp_full.read() & ~out_stream_data_V_1_sel_wr.read());
}

void Loop_2_proc::thread_out_stream_data_V_1_load_B() {
    out_stream_data_V_1_load_B = (out_stream_data_V_1_sel_wr.read() & out_stream_data_V_1_state_cmp_full.read());
}

void Loop_2_proc::thread_out_stream_data_V_1_sel() {
    out_stream_data_V_1_sel = out_stream_data_V_1_sel_rd.read();
}

void Loop_2_proc::thread_out_stream_data_V_1_state_cmp_full() {
    out_stream_data_V_1_state_cmp_full =  (sc_logic) ((!out_stream_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_stream_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void Loop_2_proc::thread_out_stream_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, canny_edges_data_stream_0_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_in.read())))) {
        out_stream_data_V_1_vld_in = ap_const_logic_1;
    } else {
        out_stream_data_V_1_vld_in = ap_const_logic_0;
    }
}

void Loop_2_proc::thread_out_stream_data_V_1_vld_out() {
    out_stream_data_V_1_vld_out = out_stream_data_V_1_state.read()[0];
}

void Loop_2_proc::thread_out_stream_data_V_TDATA() {
    out_stream_data_V_TDATA = out_stream_data_V_1_data_out.read();
}

void Loop_2_proc::thread_out_stream_data_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        out_stream_data_V_TDATA_blk_n = out_stream_data_V_1_state.read()[1];
    } else {
        out_stream_data_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void Loop_2_proc::thread_out_stream_data_V_TVALID() {
    out_stream_data_V_TVALID = out_stream_data_V_1_state.read()[0];
}

void Loop_2_proc::thread_p_Result_s_fu_121_p5() {
    p_Result_s_fu_121_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(canny_edges_data_stream_0_V_dout.read(), tmp_70_reg_154.read()), tmp_69_reg_149.read()), tmp_reg_144.read());
}

void Loop_2_proc::thread_packets_cast_loc_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        packets_cast_loc_blk_n = packets_cast_loc_empty_n.read();
    } else {
        packets_cast_loc_blk_n = ap_const_logic_1;
    }
}

void Loop_2_proc::thread_packets_cast_loc_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, packets_cast_loc_empty_n.read())))) {
        packets_cast_loc_read = ap_const_logic_1;
    } else {
        packets_cast_loc_read = ap_const_logic_0;
    }
}

void Loop_2_proc::thread_r1_cast_i_i_fu_106_p1() {
    r1_cast_i_i_fu_106_p1 = esl_zext<20,19>(p_0169_rec_i_i_reg_95.read());
}

void Loop_2_proc::thread_r_fu_115_p2() {
    r_fu_115_p2 = (!p_0169_rec_i_i_reg_95.read().is_01() || !ap_const_lv19_1.is_01())? sc_lv<19>(): (sc_biguint<19>(p_0169_rec_i_i_reg_95.read()) + sc_biguint<19>(ap_const_lv19_1));
}

void Loop_2_proc::thread_tmp_116_i_i_fu_110_p2() {
    tmp_116_i_i_fu_110_p2 = (!r1_cast_i_i_fu_106_p1.read().is_01() || !packets_cast_loc_rea_reg_131.read().is_01())? sc_lv<1>(): (sc_bigint<20>(r1_cast_i_i_fu_106_p1.read()) < sc_bigint<20>(packets_cast_loc_rea_reg_131.read()));
}

void Loop_2_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, packets_cast_loc_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_116_i_i_fu_110_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, canny_edges_data_stream_0_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_in.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_116_i_i_fu_110_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_116_i_i_fu_110_p2.read()) && !((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_116_i_i_fu_110_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, canny_edges_data_stream_0_V_empty_n.read())) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(canny_edges_data_stream_0_V_empty_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(canny_edges_data_stream_0_V_empty_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, canny_edges_data_stream_0_V_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, out_stream_data_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(out_stream_data_V_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

}

