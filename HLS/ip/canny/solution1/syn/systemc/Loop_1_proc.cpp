// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Loop_1_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Loop_1_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Loop_1_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> Loop_1_proc::ap_ST_fsm_state1 = "1";
const sc_lv<5> Loop_1_proc::ap_ST_fsm_state2 = "10";
const sc_lv<5> Loop_1_proc::ap_ST_fsm_state3 = "100";
const sc_lv<5> Loop_1_proc::ap_ST_fsm_state4 = "1000";
const sc_lv<5> Loop_1_proc::ap_ST_fsm_state5 = "10000";
const sc_lv<32> Loop_1_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> Loop_1_proc::ap_const_lv1_0 = "0";
const sc_lv<1> Loop_1_proc::ap_const_lv1_1 = "1";
const sc_lv<2> Loop_1_proc::ap_const_lv2_0 = "00";
const sc_lv<2> Loop_1_proc::ap_const_lv2_2 = "10";
const sc_lv<2> Loop_1_proc::ap_const_lv2_3 = "11";
const sc_lv<2> Loop_1_proc::ap_const_lv2_1 = "1";
const sc_lv<32> Loop_1_proc::ap_const_lv32_1 = "1";
const sc_lv<32> Loop_1_proc::ap_const_lv32_2 = "10";
const sc_lv<32> Loop_1_proc::ap_const_lv32_3 = "11";
const sc_lv<32> Loop_1_proc::ap_const_lv32_4 = "100";
const sc_lv<19> Loop_1_proc::ap_const_lv19_0 = "0000000000000000000";
const sc_lv<19> Loop_1_proc::ap_const_lv19_1 = "1";
const sc_lv<32> Loop_1_proc::ap_const_lv32_8 = "1000";
const sc_lv<32> Loop_1_proc::ap_const_lv32_F = "1111";
const sc_lv<32> Loop_1_proc::ap_const_lv32_10 = "10000";
const sc_lv<32> Loop_1_proc::ap_const_lv32_17 = "10111";
const sc_lv<32> Loop_1_proc::ap_const_lv32_18 = "11000";
const sc_lv<32> Loop_1_proc::ap_const_lv32_1F = "11111";
const bool Loop_1_proc::ap_const_boolean_1 = true;

Loop_1_proc::Loop_1_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( packets_cast_loc_empty_n );
    sensitive << ( packets_cast_loc_out_full_n );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( src_bw_data_stream_0_V_full_n );
    sensitive << ( tmp_i_i_fu_142_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( src_bw_data_stream_0_V_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_i_fu_142_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_in_stream_data_V_0_ack_in);
    sensitive << ( in_stream_data_V_0_state );

    SC_METHOD(thread_in_stream_data_V_0_ack_out);
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( src_bw_data_stream_0_V_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_i_fu_142_p2 );

    SC_METHOD(thread_in_stream_data_V_0_data_out);
    sensitive << ( in_stream_data_V_0_payload_A );
    sensitive << ( in_stream_data_V_0_payload_B );
    sensitive << ( in_stream_data_V_0_sel );

    SC_METHOD(thread_in_stream_data_V_0_load_A);
    sensitive << ( in_stream_data_V_0_sel_wr );
    sensitive << ( in_stream_data_V_0_state_cmp_full );

    SC_METHOD(thread_in_stream_data_V_0_load_B);
    sensitive << ( in_stream_data_V_0_sel_wr );
    sensitive << ( in_stream_data_V_0_state_cmp_full );

    SC_METHOD(thread_in_stream_data_V_0_sel);
    sensitive << ( in_stream_data_V_0_sel_rd );

    SC_METHOD(thread_in_stream_data_V_0_state_cmp_full);
    sensitive << ( in_stream_data_V_0_state );

    SC_METHOD(thread_in_stream_data_V_0_vld_in);
    sensitive << ( in_stream_data_V_TVALID );

    SC_METHOD(thread_in_stream_data_V_0_vld_out);
    sensitive << ( in_stream_data_V_0_state );

    SC_METHOD(thread_in_stream_data_V_TDATA_blk_n);
    sensitive << ( in_stream_data_V_0_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_i_fu_142_p2 );

    SC_METHOD(thread_in_stream_data_V_TREADY);
    sensitive << ( in_stream_data_V_0_state );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( src_bw_data_stream_0_V_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_i_fu_142_p2 );

    SC_METHOD(thread_packets_cast_loc_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( packets_cast_loc_empty_n );

    SC_METHOD(thread_packets_cast_loc_out_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( packets_cast_loc_out_full_n );

    SC_METHOD(thread_packets_cast_loc_out_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( packets_cast_loc_dout );
    sensitive << ( packets_cast_loc_empty_n );
    sensitive << ( packets_cast_loc_out_full_n );

    SC_METHOD(thread_packets_cast_loc_out_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( packets_cast_loc_empty_n );
    sensitive << ( packets_cast_loc_out_full_n );

    SC_METHOD(thread_packets_cast_loc_read);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( packets_cast_loc_empty_n );
    sensitive << ( packets_cast_loc_out_full_n );

    SC_METHOD(thread_r_cast_i_i_fu_138_p1);
    sensitive << ( p_0171_rec_i_i_reg_127 );

    SC_METHOD(thread_r_fu_147_p2);
    sensitive << ( p_0171_rec_i_i_reg_127 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_src_bw_data_stream_0_V_blk_n);
    sensitive << ( src_bw_data_stream_0_V_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_i_fu_142_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_src_bw_data_stream_0_V_din);
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( src_bw_data_stream_0_V_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_i_fu_142_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_72_reg_201 );
    sensitive << ( tmp_73_reg_206 );
    sensitive << ( tmp_74_reg_211 );
    sensitive << ( tmp_fu_153_p1 );

    SC_METHOD(thread_src_bw_data_stream_0_V_write);
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( src_bw_data_stream_0_V_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_i_fu_142_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_tmp_fu_153_p1);
    sensitive << ( in_stream_data_V_0_data_out );

    SC_METHOD(thread_tmp_i_i_fu_142_p2);
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( src_bw_data_stream_0_V_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_i_fu_142_p2 );
    sensitive << ( packets_cast_loc_rea_reg_188 );
    sensitive << ( r_cast_i_i_fu_138_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( packets_cast_loc_empty_n );
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( src_bw_data_stream_0_V_full_n );
    sensitive << ( packets_cast_loc_out_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_i_fu_142_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "00001";
    in_stream_data_V_0_sel_rd = SC_LOGIC_0;
    in_stream_data_V_0_sel_wr = SC_LOGIC_0;
    in_stream_data_V_0_state = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Loop_1_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, packets_cast_loc_dout, "(port)packets_cast_loc_dout");
    sc_trace(mVcdFile, packets_cast_loc_empty_n, "(port)packets_cast_loc_empty_n");
    sc_trace(mVcdFile, packets_cast_loc_read, "(port)packets_cast_loc_read");
    sc_trace(mVcdFile, in_stream_data_V_TDATA, "(port)in_stream_data_V_TDATA");
    sc_trace(mVcdFile, in_stream_data_V_TVALID, "(port)in_stream_data_V_TVALID");
    sc_trace(mVcdFile, in_stream_data_V_TREADY, "(port)in_stream_data_V_TREADY");
    sc_trace(mVcdFile, src_bw_data_stream_0_V_din, "(port)src_bw_data_stream_0_V_din");
    sc_trace(mVcdFile, src_bw_data_stream_0_V_full_n, "(port)src_bw_data_stream_0_V_full_n");
    sc_trace(mVcdFile, src_bw_data_stream_0_V_write, "(port)src_bw_data_stream_0_V_write");
    sc_trace(mVcdFile, packets_cast_loc_out_din, "(port)packets_cast_loc_out_din");
    sc_trace(mVcdFile, packets_cast_loc_out_full_n, "(port)packets_cast_loc_out_full_n");
    sc_trace(mVcdFile, packets_cast_loc_out_write, "(port)packets_cast_loc_out_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, in_stream_data_V_0_data_out, "in_stream_data_V_0_data_out");
    sc_trace(mVcdFile, in_stream_data_V_0_vld_in, "in_stream_data_V_0_vld_in");
    sc_trace(mVcdFile, in_stream_data_V_0_vld_out, "in_stream_data_V_0_vld_out");
    sc_trace(mVcdFile, in_stream_data_V_0_ack_in, "in_stream_data_V_0_ack_in");
    sc_trace(mVcdFile, in_stream_data_V_0_ack_out, "in_stream_data_V_0_ack_out");
    sc_trace(mVcdFile, in_stream_data_V_0_payload_A, "in_stream_data_V_0_payload_A");
    sc_trace(mVcdFile, in_stream_data_V_0_payload_B, "in_stream_data_V_0_payload_B");
    sc_trace(mVcdFile, in_stream_data_V_0_sel_rd, "in_stream_data_V_0_sel_rd");
    sc_trace(mVcdFile, in_stream_data_V_0_sel_wr, "in_stream_data_V_0_sel_wr");
    sc_trace(mVcdFile, in_stream_data_V_0_sel, "in_stream_data_V_0_sel");
    sc_trace(mVcdFile, in_stream_data_V_0_load_A, "in_stream_data_V_0_load_A");
    sc_trace(mVcdFile, in_stream_data_V_0_load_B, "in_stream_data_V_0_load_B");
    sc_trace(mVcdFile, in_stream_data_V_0_state, "in_stream_data_V_0_state");
    sc_trace(mVcdFile, in_stream_data_V_0_state_cmp_full, "in_stream_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, packets_cast_loc_blk_n, "packets_cast_loc_blk_n");
    sc_trace(mVcdFile, in_stream_data_V_TDATA_blk_n, "in_stream_data_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_i_i_fu_142_p2, "tmp_i_i_fu_142_p2");
    sc_trace(mVcdFile, src_bw_data_stream_0_V_blk_n, "src_bw_data_stream_0_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, packets_cast_loc_out_blk_n, "packets_cast_loc_out_blk_n");
    sc_trace(mVcdFile, packets_cast_loc_rea_reg_188, "packets_cast_loc_rea_reg_188");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, r_fu_147_p2, "r_fu_147_p2");
    sc_trace(mVcdFile, r_reg_196, "r_reg_196");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, tmp_72_reg_201, "tmp_72_reg_201");
    sc_trace(mVcdFile, tmp_73_reg_206, "tmp_73_reg_206");
    sc_trace(mVcdFile, tmp_74_reg_211, "tmp_74_reg_211");
    sc_trace(mVcdFile, p_0171_rec_i_i_reg_127, "p_0171_rec_i_i_reg_127");
    sc_trace(mVcdFile, tmp_fu_153_p1, "tmp_fu_153_p1");
    sc_trace(mVcdFile, r_cast_i_i_fu_138_p1, "r_cast_i_i_fu_138_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Loop_1_proc::~Loop_1_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Loop_1_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    !((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, src_bw_data_stream_0_V_full_n.read()))) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i_i_fu_142_p2.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_stream_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_vld_out.read()))) {
            in_stream_data_V_0_sel_rd =  (sc_logic) (~in_stream_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_stream_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_ack_in.read()))) {
            in_stream_data_V_0_sel_wr =  (sc_logic) (~in_stream_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_stream_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_2)))) {
            in_stream_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_1)))) {
            in_stream_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_ack_out.read()))))) {
            in_stream_data_V_0_state = ap_const_lv2_3;
        } else {
            in_stream_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(src_bw_data_stream_0_V_full_n.read(), ap_const_logic_1))) {
        p_0171_rec_i_i_reg_127 = r_reg_196.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, packets_cast_loc_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, packets_cast_loc_out_full_n.read())))) {
        p_0171_rec_i_i_reg_127 = ap_const_lv19_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_load_A.read())) {
        in_stream_data_V_0_payload_A = in_stream_data_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_load_B.read())) {
        in_stream_data_V_0_payload_B = in_stream_data_V_TDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, packets_cast_loc_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, packets_cast_loc_out_full_n.read())))) {
        packets_cast_loc_rea_reg_188 = packets_cast_loc_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, src_bw_data_stream_0_V_full_n.read()))))) {
        r_reg_196 = r_fu_147_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && !((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, src_bw_data_stream_0_V_full_n.read()))))) {
        tmp_72_reg_201 = in_stream_data_V_0_data_out.read().range(15, 8);
        tmp_73_reg_206 = in_stream_data_V_0_data_out.read().range(23, 16);
        tmp_74_reg_211 = in_stream_data_V_0_data_out.read().range(31, 24);
    }
}

void Loop_1_proc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Loop_1_proc::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Loop_1_proc::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Loop_1_proc::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Loop_1_proc::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Loop_1_proc::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, packets_cast_loc_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, packets_cast_loc_out_full_n.read()));
}

void Loop_1_proc::thread_ap_block_state2() {
    ap_block_state2 = ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, src_bw_data_stream_0_V_full_n.read())));
}

void Loop_1_proc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, src_bw_data_stream_0_V_full_n.read()))) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i_i_fu_142_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Loop_1_proc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Loop_1_proc::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void Loop_1_proc::thread_in_stream_data_V_0_ack_in() {
    in_stream_data_V_0_ack_in = in_stream_data_V_0_state.read()[1];
}

void Loop_1_proc::thread_in_stream_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && 
         !((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, src_bw_data_stream_0_V_full_n.read()))))) {
        in_stream_data_V_0_ack_out = ap_const_logic_1;
    } else {
        in_stream_data_V_0_ack_out = ap_const_logic_0;
    }
}

void Loop_1_proc::thread_in_stream_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_sel.read())) {
        in_stream_data_V_0_data_out = in_stream_data_V_0_payload_B.read();
    } else {
        in_stream_data_V_0_data_out = in_stream_data_V_0_payload_A.read();
    }
}

void Loop_1_proc::thread_in_stream_data_V_0_load_A() {
    in_stream_data_V_0_load_A = (in_stream_data_V_0_state_cmp_full.read() & ~in_stream_data_V_0_sel_wr.read());
}

void Loop_1_proc::thread_in_stream_data_V_0_load_B() {
    in_stream_data_V_0_load_B = (in_stream_data_V_0_sel_wr.read() & in_stream_data_V_0_state_cmp_full.read());
}

void Loop_1_proc::thread_in_stream_data_V_0_sel() {
    in_stream_data_V_0_sel = in_stream_data_V_0_sel_rd.read();
}

void Loop_1_proc::thread_in_stream_data_V_0_state_cmp_full() {
    in_stream_data_V_0_state_cmp_full =  (sc_logic) ((!in_stream_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_stream_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void Loop_1_proc::thread_in_stream_data_V_0_vld_in() {
    in_stream_data_V_0_vld_in = in_stream_data_V_TVALID.read();
}

void Loop_1_proc::thread_in_stream_data_V_0_vld_out() {
    in_stream_data_V_0_vld_out = in_stream_data_V_0_state.read()[0];
}

void Loop_1_proc::thread_in_stream_data_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()))) {
        in_stream_data_V_TDATA_blk_n = in_stream_data_V_0_state.read()[0];
    } else {
        in_stream_data_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void Loop_1_proc::thread_in_stream_data_V_TREADY() {
    in_stream_data_V_TREADY = in_stream_data_V_0_state.read()[1];
}

void Loop_1_proc::thread_internal_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, src_bw_data_stream_0_V_full_n.read()))) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i_i_fu_142_p2.read()))) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void Loop_1_proc::thread_packets_cast_loc_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        packets_cast_loc_blk_n = packets_cast_loc_empty_n.read();
    } else {
        packets_cast_loc_blk_n = ap_const_logic_1;
    }
}

void Loop_1_proc::thread_packets_cast_loc_out_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        packets_cast_loc_out_blk_n = packets_cast_loc_out_full_n.read();
    } else {
        packets_cast_loc_out_blk_n = ap_const_logic_1;
    }
}

void Loop_1_proc::thread_packets_cast_loc_out_din() {
    packets_cast_loc_out_din = packets_cast_loc_dout.read();
}

void Loop_1_proc::thread_packets_cast_loc_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, packets_cast_loc_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, packets_cast_loc_out_full_n.read())))) {
        packets_cast_loc_out_write = ap_const_logic_1;
    } else {
        packets_cast_loc_out_write = ap_const_logic_0;
    }
}

void Loop_1_proc::thread_packets_cast_loc_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, packets_cast_loc_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, packets_cast_loc_out_full_n.read())))) {
        packets_cast_loc_read = ap_const_logic_1;
    } else {
        packets_cast_loc_read = ap_const_logic_0;
    }
}

void Loop_1_proc::thread_r_cast_i_i_fu_138_p1() {
    r_cast_i_i_fu_138_p1 = esl_zext<20,19>(p_0171_rec_i_i_reg_127.read());
}

void Loop_1_proc::thread_r_fu_147_p2() {
    r_fu_147_p2 = (!p_0171_rec_i_i_reg_127.read().is_01() || !ap_const_lv19_1.is_01())? sc_lv<19>(): (sc_biguint<19>(p_0171_rec_i_i_reg_127.read()) + sc_biguint<19>(ap_const_lv19_1));
}

void Loop_1_proc::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void Loop_1_proc::thread_src_bw_data_stream_0_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        src_bw_data_stream_0_V_blk_n = src_bw_data_stream_0_V_full_n.read();
    } else {
        src_bw_data_stream_0_V_blk_n = ap_const_logic_1;
    }
}

void Loop_1_proc::thread_src_bw_data_stream_0_V_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(src_bw_data_stream_0_V_full_n.read(), ap_const_logic_1))) {
        src_bw_data_stream_0_V_din = tmp_74_reg_211.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(src_bw_data_stream_0_V_full_n.read(), ap_const_logic_1))) {
        src_bw_data_stream_0_V_din = tmp_73_reg_206.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(src_bw_data_stream_0_V_full_n.read(), ap_const_logic_1))) {
        src_bw_data_stream_0_V_din = tmp_72_reg_201.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && 
                !((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, src_bw_data_stream_0_V_full_n.read()))))) {
        src_bw_data_stream_0_V_din = tmp_fu_153_p1.read();
    } else {
        src_bw_data_stream_0_V_din = "XXXXXXXX";
    }
}

void Loop_1_proc::thread_src_bw_data_stream_0_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && 
          !((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, src_bw_data_stream_0_V_full_n.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(src_bw_data_stream_0_V_full_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(src_bw_data_stream_0_V_full_n.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(src_bw_data_stream_0_V_full_n.read(), ap_const_logic_1)))) {
        src_bw_data_stream_0_V_write = ap_const_logic_1;
    } else {
        src_bw_data_stream_0_V_write = ap_const_logic_0;
    }
}

void Loop_1_proc::thread_start_out() {
    start_out = real_start.read();
}

void Loop_1_proc::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void Loop_1_proc::thread_tmp_fu_153_p1() {
    tmp_fu_153_p1 = in_stream_data_V_0_data_out.read().range(8-1, 0);
}

void Loop_1_proc::thread_tmp_i_i_fu_142_p2() {
    tmp_i_i_fu_142_p2 = (!r_cast_i_i_fu_138_p1.read().is_01() || !packets_cast_loc_rea_reg_188.read().is_01())? sc_lv<1>(): (sc_bigint<20>(r_cast_i_i_fu_138_p1.read()) < sc_bigint<20>(packets_cast_loc_rea_reg_188.read()));
}

void Loop_1_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, packets_cast_loc_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, packets_cast_loc_out_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, src_bw_data_stream_0_V_full_n.read()))) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_i_i_fu_142_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && !((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i_i_fu_142_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, src_bw_data_stream_0_V_full_n.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(src_bw_data_stream_0_V_full_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(src_bw_data_stream_0_V_full_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(src_bw_data_stream_0_V_full_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<5>) ("XXXXX");
            break;
    }
}

}

