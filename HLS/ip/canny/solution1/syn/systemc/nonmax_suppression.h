// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _nonmax_suppression_HH_
#define _nonmax_suppression_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "nonmax_suppression_lbuffer_val_0.h"

namespace ap_rtl {

struct nonmax_suppression : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<32> > gd_rows_V;
    sc_in< sc_lv<32> > gd_cols_V;
    sc_in< sc_lv<16> > gd_data_stream_V_dout;
    sc_in< sc_logic > gd_data_stream_V_empty_n;
    sc_out< sc_logic > gd_data_stream_V_read;
    sc_out< sc_lv<16> > dst_data_stream_V_din;
    sc_in< sc_logic > dst_data_stream_V_full_n;
    sc_out< sc_logic > dst_data_stream_V_write;


    // Module declarations
    nonmax_suppression(sc_module_name name);
    SC_HAS_PROCESS(nonmax_suppression);

    ~nonmax_suppression();

    sc_trace_file* mVcdFile;

    nonmax_suppression_lbuffer_val_0* lbuffer_val_0_U;
    nonmax_suppression_lbuffer_val_0* lbuffer_val_1_U;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > gd_data_stream_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > or_cond3_reg_877;
    sc_signal< sc_logic > dst_data_stream_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_lv<1> > or_cond2_reg_897;
    sc_signal< sc_lv<1> > or_cond2_reg_897_pp0_iter2_reg;
    sc_signal< sc_lv<32> > t_V_1_reg_255;
    sc_signal< sc_lv<32> > t_V_1_reg_255_pp0_iter1_reg;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<33> > ret_V_fu_271_p2;
    sc_signal< sc_lv<33> > ret_V_1_fu_281_p2;
    sc_signal< sc_lv<33> > ret_V_2_fu_287_p2;
    sc_signal< sc_lv<33> > ret_V_3_fu_293_p2;
    sc_signal< sc_lv<1> > tmp_1_fu_303_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > i_V_fu_308_p2;
    sc_signal< sc_lv<32> > i_V_reg_836;
    sc_signal< sc_lv<1> > icmp_fu_324_p2;
    sc_signal< sc_lv<1> > icmp_reg_841;
    sc_signal< sc_lv<1> > tmp_3_fu_330_p2;
    sc_signal< sc_lv<1> > tmp_3_reg_846;
    sc_signal< sc_lv<1> > tmp_8_fu_336_p2;
    sc_signal< sc_lv<1> > tmp_8_reg_851;
    sc_signal< sc_lv<1> > tmp_6_fu_341_p2;
    sc_signal< sc_lv<1> > tmp_6_reg_856;
    sc_signal< sc_lv<1> > tmp_7_fu_350_p2;
    sc_signal< sc_lv<1> > tmp_7_reg_861;
    sc_signal< sc_lv<1> > tmp_7_reg_861_pp0_iter1_reg;
    sc_signal< sc_lv<32> > j_V_fu_355_p2;
    sc_signal< sc_lv<32> > j_V_reg_865;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > tmp_s_fu_361_p2;
    sc_signal< sc_lv<1> > tmp_s_reg_870;
    sc_signal< sc_lv<1> > tmp_s_reg_870_pp0_iter1_reg;
    sc_signal< sc_lv<1> > or_cond3_fu_366_p2;
    sc_signal< sc_lv<1> > or_cond3_reg_877_pp0_iter1_reg;
    sc_signal< sc_lv<11> > lbuffer_val_1_addr_reg_881;
    sc_signal< sc_lv<11> > lbuffer_val_1_addr_reg_881_pp0_iter1_reg;
    sc_signal< sc_lv<1> > tmp_11_fu_377_p2;
    sc_signal< sc_lv<1> > tmp_11_reg_892;
    sc_signal< sc_lv<1> > tmp_11_reg_892_pp0_iter1_reg;
    sc_signal< sc_lv<1> > tmp_11_reg_892_pp0_iter2_reg;
    sc_signal< sc_lv<1> > or_cond2_fu_388_p2;
    sc_signal< sc_lv<1> > or_cond2_reg_897_pp0_iter1_reg;
    sc_signal< sc_lv<16> > lbuffer_val_0_q0;
    sc_signal< sc_lv<16> > tmp0_reg_901;
    sc_signal< sc_lv<1> > icmp1_fu_489_p2;
    sc_signal< sc_lv<1> > icmp1_reg_906;
    sc_signal< sc_lv<14> > out_pixel_val_fu_671_p3;
    sc_signal< sc_lv<14> > out_pixel_val_reg_911;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<11> > lbuffer_val_0_address0;
    sc_signal< sc_logic > lbuffer_val_0_ce0;
    sc_signal< sc_lv<11> > lbuffer_val_0_address1;
    sc_signal< sc_logic > lbuffer_val_0_ce1;
    sc_signal< sc_logic > lbuffer_val_0_we1;
    sc_signal< sc_lv<11> > lbuffer_val_1_address0;
    sc_signal< sc_logic > lbuffer_val_1_ce0;
    sc_signal< sc_lv<16> > lbuffer_val_1_q0;
    sc_signal< sc_logic > lbuffer_val_1_ce1;
    sc_signal< sc_logic > lbuffer_val_1_we1;
    sc_signal< sc_lv<32> > t_V_reg_244;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<32> > ap_phi_mux_t_V_1_phi_fu_259_p4;
    sc_signal< sc_lv<64> > tmp_4_fu_371_p1;
    sc_signal< sc_lv<64> > tmp_10_fu_412_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<16> > tmp1_s_fu_136;
    sc_signal< sc_lv<16> > tmp0_s_fu_140;
    sc_signal< sc_lv<16> > element_gd_s_fu_144;
    sc_signal< sc_lv<16> > win_val_0_1_fu_148;
    sc_signal< sc_lv<16> > win_val_0_0_0_win_va_fu_458_p3;
    sc_signal< sc_lv<16> > win_val_0_1_1_fu_152;
    sc_signal< sc_lv<16> > win_val_1_1_fu_156;
    sc_signal< sc_lv<16> > win_val_1_0_0_win_va_fu_451_p3;
    sc_signal< sc_lv<16> > win_val_1_1_1_fu_160;
    sc_signal< sc_lv<16> > win_val_2_1_fu_164;
    sc_signal< sc_lv<16> > win_val_2_0_0_win_va_fu_444_p3;
    sc_signal< sc_lv<16> > win_val_2_1_1_fu_168;
    sc_signal< sc_lv<33> > lhs_V_cast_fu_267_p1;
    sc_signal< sc_lv<33> > lhs_V_1_cast_fu_277_p1;
    sc_signal< sc_lv<33> > tmp_cast_fu_299_p1;
    sc_signal< sc_lv<31> > tmp_fu_314_p4;
    sc_signal< sc_lv<33> > tmp_6_cast_fu_346_p1;
    sc_signal< sc_lv<1> > tmp_21_fu_382_p2;
    sc_signal< sc_lv<31> > tmp_12_fu_479_p4;
    sc_signal< sc_lv<2> > current_dir_fu_465_p1;
    sc_signal< sc_lv<1> > tmp_13_fu_495_p2;
    sc_signal< sc_lv<1> > tmp_14_fu_501_p2;
    sc_signal< sc_lv<1> > sel_tmp1_fu_513_p2;
    sc_signal< sc_lv<1> > tmp_15_fu_507_p2;
    sc_signal< sc_lv<14> > tmp_23_fu_545_p4;
    sc_signal< sc_lv<14> > tmp_24_fu_555_p4;
    sc_signal< sc_lv<14> > tmp_17_fu_535_p4;
    sc_signal< sc_lv<14> > tmp_25_fu_565_p3;
    sc_signal< sc_lv<1> > sel_tmp2_fu_519_p2;
    sc_signal< sc_lv<14> > tmp_16_fu_525_p4;
    sc_signal< sc_lv<14> > tmp_26_fu_573_p3;
    sc_signal< sc_lv<14> > tmp_30_fu_609_p4;
    sc_signal< sc_lv<14> > tmp_31_fu_619_p4;
    sc_signal< sc_lv<14> > tmp_29_fu_599_p4;
    sc_signal< sc_lv<14> > tmp_32_fu_629_p3;
    sc_signal< sc_lv<14> > tmp_28_fu_589_p4;
    sc_signal< sc_lv<14> > tmp_33_fu_637_p3;
    sc_signal< sc_lv<14> > out_pixel_val_2_cast_fu_469_p4;
    sc_signal< sc_lv<14> > tmp_34_fu_645_p3;
    sc_signal< sc_lv<14> > tmp_27_fu_581_p3;
    sc_signal< sc_lv<1> > tmp_18_fu_653_p2;
    sc_signal< sc_lv<1> > tmp_19_fu_659_p2;
    sc_signal< sc_lv<1> > or_cond1_fu_665_p2;
    sc_signal< sc_lv<1> > tmp2_fu_722_p2;
    sc_signal< sc_lv<1> > tmp9_fu_718_p2;
    sc_signal< sc_lv<1> > or_cond4_fu_726_p2;
    sc_signal< sc_lv<14> > tmp_20_fu_732_p3;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_state7;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<33> ap_const_lv33_1;
    static const sc_lv<33> ap_const_lv33_1FFFFFFFF;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<14> ap_const_lv14_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage0_iter2();
    void thread_ap_block_state6_pp0_stage0_iter3();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_t_V_1_phi_fu_259_p4();
    void thread_ap_ready();
    void thread_current_dir_fu_465_p1();
    void thread_dst_data_stream_V_blk_n();
    void thread_dst_data_stream_V_din();
    void thread_dst_data_stream_V_write();
    void thread_gd_data_stream_V_blk_n();
    void thread_gd_data_stream_V_read();
    void thread_i_V_fu_308_p2();
    void thread_icmp1_fu_489_p2();
    void thread_icmp_fu_324_p2();
    void thread_internal_ap_ready();
    void thread_j_V_fu_355_p2();
    void thread_lbuffer_val_0_address0();
    void thread_lbuffer_val_0_address1();
    void thread_lbuffer_val_0_ce0();
    void thread_lbuffer_val_0_ce1();
    void thread_lbuffer_val_0_we1();
    void thread_lbuffer_val_1_address0();
    void thread_lbuffer_val_1_ce0();
    void thread_lbuffer_val_1_ce1();
    void thread_lbuffer_val_1_we1();
    void thread_lhs_V_1_cast_fu_277_p1();
    void thread_lhs_V_cast_fu_267_p1();
    void thread_or_cond1_fu_665_p2();
    void thread_or_cond2_fu_388_p2();
    void thread_or_cond3_fu_366_p2();
    void thread_or_cond4_fu_726_p2();
    void thread_out_pixel_val_2_cast_fu_469_p4();
    void thread_out_pixel_val_fu_671_p3();
    void thread_real_start();
    void thread_ret_V_1_fu_281_p2();
    void thread_ret_V_2_fu_287_p2();
    void thread_ret_V_3_fu_293_p2();
    void thread_ret_V_fu_271_p2();
    void thread_sel_tmp1_fu_513_p2();
    void thread_sel_tmp2_fu_519_p2();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp2_fu_722_p2();
    void thread_tmp9_fu_718_p2();
    void thread_tmp_10_fu_412_p1();
    void thread_tmp_11_fu_377_p2();
    void thread_tmp_12_fu_479_p4();
    void thread_tmp_13_fu_495_p2();
    void thread_tmp_14_fu_501_p2();
    void thread_tmp_15_fu_507_p2();
    void thread_tmp_16_fu_525_p4();
    void thread_tmp_17_fu_535_p4();
    void thread_tmp_18_fu_653_p2();
    void thread_tmp_19_fu_659_p2();
    void thread_tmp_1_fu_303_p2();
    void thread_tmp_20_fu_732_p3();
    void thread_tmp_21_fu_382_p2();
    void thread_tmp_23_fu_545_p4();
    void thread_tmp_24_fu_555_p4();
    void thread_tmp_25_fu_565_p3();
    void thread_tmp_26_fu_573_p3();
    void thread_tmp_27_fu_581_p3();
    void thread_tmp_28_fu_589_p4();
    void thread_tmp_29_fu_599_p4();
    void thread_tmp_30_fu_609_p4();
    void thread_tmp_31_fu_619_p4();
    void thread_tmp_32_fu_629_p3();
    void thread_tmp_33_fu_637_p3();
    void thread_tmp_34_fu_645_p3();
    void thread_tmp_3_fu_330_p2();
    void thread_tmp_4_fu_371_p1();
    void thread_tmp_6_cast_fu_346_p1();
    void thread_tmp_6_fu_341_p2();
    void thread_tmp_7_fu_350_p2();
    void thread_tmp_8_fu_336_p2();
    void thread_tmp_cast_fu_299_p1();
    void thread_tmp_fu_314_p4();
    void thread_tmp_s_fu_361_p2();
    void thread_win_val_0_0_0_win_va_fu_458_p3();
    void thread_win_val_1_0_0_win_va_fu_451_p3();
    void thread_win_val_2_0_0_win_va_fu_444_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
