// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Block_Mat_exit27932_s.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Block_Mat_exit27932_s::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Block_Mat_exit27932_s::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> Block_Mat_exit27932_s::ap_ST_fsm_state1 = "1";
const sc_lv<4> Block_Mat_exit27932_s::ap_ST_fsm_state2 = "10";
const sc_lv<4> Block_Mat_exit27932_s::ap_ST_fsm_state3 = "100";
const sc_lv<4> Block_Mat_exit27932_s::ap_ST_fsm_state4 = "1000";
const sc_lv<32> Block_Mat_exit27932_s::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Block_Mat_exit27932_s::ap_const_lv32_3 = "11";
const sc_lv<32> Block_Mat_exit27932_s::ap_const_lv32_2 = "10";
const sc_lv<32> Block_Mat_exit27932_s::ap_const_lv32_A = "1010";
const bool Block_Mat_exit27932_s::ap_const_boolean_1 = true;

Block_Mat_exit27932_s::Block_Mat_exit27932_s(sc_module_name name) : sc_module(name), mVcdFile(0) {
    canny_edge_mul_mul_9ns_20s_20_3_1_U1 = new canny_edge_mul_mul_9ns_20s_20_3_1<1,3,9,20,20>("canny_edge_mul_mul_9ns_20s_20_3_1_U1");
    canny_edge_mul_mul_9ns_20s_20_3_1_U1->clk(ap_clk);
    canny_edge_mul_mul_9ns_20s_20_3_1_U1->reset(ap_rst);
    canny_edge_mul_mul_9ns_20s_20_3_1_U1->din0(grp_fu_73_p0);
    canny_edge_mul_mul_9ns_20s_20_3_1_U1->din1(grp_fu_73_p1);
    canny_edge_mul_mul_9ns_20s_20_3_1_U1->ce(grp_fu_73_ce);
    canny_edge_mul_mul_9ns_20s_20_3_1_U1->dout(grp_fu_73_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( packets_cast_out_out_full_n );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( packets_cast_out_out_full_n );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_col_packets_fu_55_p4);
    sensitive << ( cols_V );

    SC_METHOD(thread_grp_fu_73_ce);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_grp_fu_73_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_fu_73_p00 );

    SC_METHOD(thread_grp_fu_73_p00);
    sensitive << ( col_packets_fu_55_p4 );

    SC_METHOD(thread_grp_fu_73_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( rows_V );

    SC_METHOD(thread_packets_cast_out_out_blk_n);
    sensitive << ( packets_cast_out_out_full_n );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_packets_cast_out_out_din);
    sensitive << ( packets_cast_out_out_full_n );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_fu_73_p2 );

    SC_METHOD(thread_packets_cast_out_out_write);
    sensitive << ( packets_cast_out_out_full_n );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( packets_cast_out_out_full_n );
    sensitive << ( ap_CS_fsm_state4 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Block_Mat_exit27932_s_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, rows_V, "(port)rows_V");
    sc_trace(mVcdFile, cols_V, "(port)cols_V");
    sc_trace(mVcdFile, packets_cast_out_out_din, "(port)packets_cast_out_out_din");
    sc_trace(mVcdFile, packets_cast_out_out_full_n, "(port)packets_cast_out_out_full_n");
    sc_trace(mVcdFile, packets_cast_out_out_write, "(port)packets_cast_out_out_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, packets_cast_out_out_blk_n, "packets_cast_out_out_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, grp_fu_73_p2, "grp_fu_73_p2");
    sc_trace(mVcdFile, col_packets_fu_55_p4, "col_packets_fu_55_p4");
    sc_trace(mVcdFile, grp_fu_73_p0, "grp_fu_73_p0");
    sc_trace(mVcdFile, grp_fu_73_p1, "grp_fu_73_p1");
    sc_trace(mVcdFile, grp_fu_73_ce, "grp_fu_73_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, grp_fu_73_p00, "grp_fu_73_p00");
#endif

    }
}

Block_Mat_exit27932_s::~Block_Mat_exit27932_s() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete canny_edge_mul_mul_9ns_20s_20_3_1_U1;
}

void Block_Mat_exit27932_s::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                    esl_seteq<1,1,1>(packets_cast_out_out_full_n.read(), ap_const_logic_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
}

void Block_Mat_exit27932_s::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Block_Mat_exit27932_s::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Block_Mat_exit27932_s::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Block_Mat_exit27932_s::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(packets_cast_out_out_full_n.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Block_Mat_exit27932_s::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Block_Mat_exit27932_s::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(packets_cast_out_out_full_n.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Block_Mat_exit27932_s::thread_col_packets_fu_55_p4() {
    col_packets_fu_55_p4 = cols_V.read().range(10, 2);
}

void Block_Mat_exit27932_s::thread_grp_fu_73_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
           esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))))) {
        grp_fu_73_ce = ap_const_logic_0;
    } else {
        grp_fu_73_ce = ap_const_logic_1;
    }
}

void Block_Mat_exit27932_s::thread_grp_fu_73_p0() {
    grp_fu_73_p0 =  (sc_lv<9>) (grp_fu_73_p00.read());
}

void Block_Mat_exit27932_s::thread_grp_fu_73_p00() {
    grp_fu_73_p00 = esl_zext<20,9>(col_packets_fu_55_p4.read());
}

void Block_Mat_exit27932_s::thread_grp_fu_73_p1() {
    grp_fu_73_p1 = rows_V.read().range(20-1, 0);
}

void Block_Mat_exit27932_s::thread_packets_cast_out_out_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        packets_cast_out_out_blk_n = packets_cast_out_out_full_n.read();
    } else {
        packets_cast_out_out_blk_n = ap_const_logic_1;
    }
}

void Block_Mat_exit27932_s::thread_packets_cast_out_out_din() {
    packets_cast_out_out_din = grp_fu_73_p2.read();
}

void Block_Mat_exit27932_s::thread_packets_cast_out_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(packets_cast_out_out_full_n.read(), ap_const_logic_1))) {
        packets_cast_out_out_write = ap_const_logic_1;
    } else {
        packets_cast_out_out_write = ap_const_logic_0;
    }
}

void Block_Mat_exit27932_s::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(packets_cast_out_out_full_n.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

